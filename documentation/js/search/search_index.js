var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.198,1,2.251]],["body/controllers/AppController.html",[0,2.02,1,3.794,2,1.788,3,0.343,4,0.343,5,0.298,6,3.977,7,0.537,8,1.538,9,5.381,10,1.788,11,0.027,12,4.709,13,0.763,14,4.709,15,1.27,16,1.161,17,0.569,18,0.763,19,3.394,20,3.977,21,3.794,22,3.977,23,0.343,24,0.018,25,2.221,26,2.606,27,1.27,28,4.709,29,0.022,30,0.022]],["title/modules/AppModule.html",[31,1.119,32,2.251]],["body/modules/AppModule.html",[1,3.756,2,1.932,3,0.286,4,0.286,5,0.248,11,0.027,17,0.613,18,0.636,19,3.507,20,3.317,23,0.286,24,0.015,29,0.019,30,0.019,31,1.867,32,4.535,33,1.72,34,1.853,35,2.174,36,2.174,37,1.853,38,3.124,39,2.002,40,3.317,41,3.317,42,3.317,43,3.83,44,3.83,45,2.989,46,3.507,47,2.816,48,2.174,49,2.002,50,3.928,51,3.075,52,5.089,53,2.002,54,3.928,55,3.928,56,2.594,57,2.613,58,2.613,59,2.613,60,3.317,61,3.928,62,2.613,63,3.928]],["title/injectables/AppService.html",[19,1.872,64,0.64]],["body/injectables/AppService.html",[3,0.359,4,0.359,5,0.312,7,0.564,8,1.582,9,5.467,11,0.026,13,0.8,15,1.332,16,1.194,17,0.458,18,0.8,19,3.247,23,0.359,24,0.018,27,1.332,29,0.022,30,0.022,64,1.109,65,2.012,66,4.171,67,4.939,68,4.939,69,4.939]],["title/controllers/AuthController.html",[0,1.198,70,2.251]],["body/controllers/AuthController.html",[0,0.87,2,0.932,3,0.179,4,0.179,5,0.155,7,0.28,8,0.989,10,1.975,11,0.027,13,0.843,15,1.403,17,0.551,18,0.398,21,3.462,23,0.179,24,0.009,25,1.158,27,1.403,29,0.014,30,0.014,49,1.869,70,2.439,71,2.074,72,1.634,73,2.456,74,1.977,75,4.394,76,3.703,77,4.049,78,4.107,79,3.095,80,2.456,81,3.632,82,5.108,83,3.029,84,2.456,85,2.476,86,2.456,87,4.909,88,2.015,89,2.456,90,4.863,91,4.049,92,3.095,93,2.456,94,1.721,95,1.222,96,0.777,97,1.31,98,2.278,99,2.456,100,4.086,101,2.456,102,2.456,103,3.666,104,4.609,105,2.456,106,2.456,107,2.456,108,2.72,109,2.456,110,3.861,111,3.666,112,3.666,113,2.456,114,2.456,115,3.632,116,2.456,117,1.213,118,2.456,119,3.095,120,2.456,121,4.863,122,3.666,123,2.456,124,2.456,125,3.632,126,2.456,127,2.456,128,2.72,129,2.653,130,2.456,131,3.666,132,2.72,133,1.392,134,2.456,135,1.634,136,1.634,137,2.456,138,2.456,139,1.822,140,4.049,141,5.108,142,0.932,143,2.427,144,2.074,145,2.456,146,2.456,147,2.456,148,2.456,149,2.456,150,2.456,151,2.456,152,1.822,153,2.456,154,2.456,155,2.456,156,4.386,157,3.462,158,4.409,159,2.074,160,2.456,161,2.456,162,2.456,163,2.456,164,2.456,165,2.456,166,2.456,167,2.456,168,2.456,169,2.456,170,2.456,171,2.456,172,2.456,173,2.456,174,2.456,175,1.634,176,2.456,177,2.456,178,2.456,179,2.456]],["title/modules/AuthModule.html",[31,1.119,43,2.044]],["body/modules/AuthModule.html",[2,1.877,3,0.273,4,0.273,5,0.238,11,0.027,17,0.601,18,0.609,23,0.273,24,0.014,29,0.019,30,0.019,31,1.828,33,1.645,34,1.772,35,2.079,36,2.079,37,1.772,38,3.057,39,2.817,43,4.054,45,2.953,47,2.736,48,2.079,49,1.916,51,3.339,59,2.5,70,3.676,74,1.161,143,3.712,144,3.173,180,3.173,181,3.758,182,3.173,183,3.173,184,4.054,185,3.758,186,3.758,187,2.788,188,4.944,189,2.5,190,3.758,191,3.758,192,4.665,193,4.355,194,2.5,195,3.758,196,3.758,197,2.788,198,3.758,199,3.173,200,3.173,201,3.758,202,3.758,203,3.173,204,3.758,205,3.758,206,3.173,207,2.271]],["title/injectables/AuthService.html",[64,0.64,143,1.872]],["body/injectables/AuthService.html",[3,0.08,4,0.08,5,0.07,7,0.126,8,0.515,11,0.027,13,0.819,15,1.331,16,1.315,17,0.414,18,0.178,23,0.08,24,0.004,27,1.252,29,0.007,30,0.007,64,0.361,65,0.448,74,1.851,75,0.929,76,1.613,77,3.443,78,1.613,79,1.613,82,3.769,83,2.579,85,0.836,91,0.816,92,1.613,94,1.587,95,1.127,96,0.755,97,1.243,98,2.1,108,1.417,110,3.753,117,1.889,128,0.816,129,2.775,132,0.816,133,1.147,143,1.057,152,0.816,159,0.929,187,0.816,193,2.986,194,0.732,200,0.929,203,2.137,206,3.165,208,0.929,209,3.021,210,2.916,211,1.91,212,1.91,213,1.91,214,3.021,215,4.641,216,2.53,217,2.53,218,2.53,219,1.91,220,0.836,221,0.732,222,1.147,223,4.024,224,1.1,225,1.194,226,1.1,227,1.91,228,1.1,229,1.91,230,1.91,231,2.53,232,1.91,233,1.1,234,3.753,235,1.91,236,1.1,237,3.021,238,3.021,239,2.53,240,3.021,241,1.91,242,1.154,243,1.1,244,1.91,245,3.161,246,1.91,247,3.021,248,1.91,249,1.1,250,1.91,251,1.154,252,1.1,253,2.276,254,1.1,255,4.935,256,1.1,257,1.529,258,1.672,259,3.748,260,3.021,261,2.53,262,1.1,263,1.1,264,1.1,265,4.024,266,1.1,267,3.419,268,1.91,269,1.826,270,1.1,271,1.91,272,1.1,273,1.417,274,1.1,275,0.609,276,1.613,277,2.551,278,1.684,279,1.1,280,1.1,281,0.732,282,0.665,283,1.1,284,2.19,285,1.91,286,1.91,287,1.1,288,1.91,289,1.1,290,1.1,291,1.877,292,3.021,293,2.302,294,2.53,295,2.697,296,1.423,297,1.962,298,1.91,299,1.1,300,2.276,301,1.1,302,1.91,303,1.1,304,1.1,305,0.929,306,1.684,307,1.1,308,1.91,309,1.1,310,2.53,311,2.01,312,0.929,313,0.929,314,2.106,315,1.613,316,0.929,317,1.1,318,1.154,319,1.154,320,0.665,321,2.137,322,1.91,323,1.91,324,1.1,325,0.929,326,1.271,327,1.1,328,1.613,329,1.4,330,1.1,331,0.929,332,0.929,333,1.1,334,1.1,335,1.1,336,0.816,337,2.53,338,1.1,339,1.1,340,1.1,341,0.732,342,1.1,343,1.1,344,2.137,345,1.1,346,2.53,347,3.021,348,3.021,349,1.1,350,1.1,351,1.1,352,1.1,353,0.665,354,1.1,355,0.732,356,1.1,357,1.1,358,1.497,359,1.1,360,1.4,361,1.1,362,1.271,363,0.974,364,1.425,365,2.137,366,1.826,367,1.417,368,1.417,369,1.417,370,1.417,371,2.551,372,1.1,373,1.613,374,1.613,375,1.613,376,2.241,377,1.613,378,1.91,379,1.613,380,1.613,381,2.241,382,1.91,383,2.53,384,1.91,385,1.877,386,1.1,387,1.91,388,3.021,389,1.91,390,1.1,391,1.91,392,3.748,393,1.1,394,3.021,395,1.1,396,3.021,397,1.1,398,1.1,399,2.53,400,2.53,401,2.53,402,2.53,403,2.53,404,2.53,405,4.641,406,1.1,407,1.1,408,1.1,409,1.1,410,1.91,411,1.1,412,1.1,413,1.1,414,0.929,415,1.1,416,0.929,417,0.816,418,1.1,419,1.1,420,1.1,421,1.1,422,1.497,423,1.91,424,1.91,425,0.929,426,1.91,427,1.91,428,1.91,429,1.91,430,2.53,431,1.91,432,1.684,433,1.1,434,1.1,435,1.1,436,0.929,437,1.1,438,1.1,439,0.929,440,0.929,441,1.1,442,1.1,443,1.1,444,1.1,445,1.1,446,1.271,447,1.1,448,1.1,449,1.1,450,1.1,451,3.021,452,2.53,453,1.91,454,1.91,455,1.91,456,0.929,457,1.1,458,0.732,459,1.1,460,1.1,461,1.1,462,1.91,463,1.1,464,1.1,465,1.91,466,1.1,467,1.1,468,1.91,469,1.1]],["title/classes/CreatePersonDto.html",[24,0.013,470,1.872]],["body/classes/CreatePersonDto.html",[3,0.28,4,0.28,5,0.244,7,0.44,10,2.25,11,0.027,13,0.96,16,1.326,17,0.466,23,0.28,24,0.019,29,0.019,30,0.019,88,1.832,95,1.392,96,0.885,97,1.587,142,1.463,158,3.729,257,3.38,258,2.132,269,3.037,296,1.908,306,3.721,318,3.38,319,3.38,326,3.721,336,4.149,414,4.244,470,2.781,471,1.687,472,5.191,473,2.859,474,1.78,475,3.729,476,5.025,477,3.853,478,3.853,479,5.025,480,4.244,481,5.025,482,3.853,483,4.244,484,3.853,485,3.853,486,3.853,487,3.095,488,5.593,489,4.244,490,4.398,491,3.402,492,1.964,493,3.253]],["title/classes/CreateRoleDto.html",[24,0.013,494,2.044]],["body/classes/CreateRoleDto.html",[3,0.276,4,0.276,5,0.24,7,0.432,10,2.236,11,0.027,13,0.954,16,1.321,17,0.461,23,0.276,24,0.019,29,0.019,30,0.019,88,2.028,95,1.436,96,0.879,97,1.58,133,1.887,142,1.438,297,1.438,358,2.429,363,3.118,364,2.345,422,2.429,471,1.659,474,1.761,475,4.369,487,3.384,490,4.369,491,3.259,492,1.932,494,3.004,495,5.164,496,3.199,497,6.115,498,4.971,499,3.792,500,3.789,501,3.789,502,3.789,503,3.789,504,3.789,505,3.789,506,4.971,507,4.971,508,4.197,509,3.789,510,3.789,511,3.789,512,4.971,513,4.971,514,3.789]],["title/injectables/JwtAuthGuard.html",[56,1.724,64,0.64]],["body/injectables/JwtAuthGuard.html",[3,0.309,4,0.309,5,0.269,7,0.485,8,1.443,11,0.027,13,0.867,15,1.146,17,0.57,18,0.688,22,3.587,23,0.309,24,0.016,25,2.004,27,1.443,29,0.02,30,0.02,53,2.166,56,2.728,64,1.012,65,1.73,94,1.77,95,1.256,96,0.799,97,1.347,189,2.827,220,1.86,284,1.505,297,1.613,515,4.945,516,3.587,517,3.233,518,5.35,519,3.969,520,3.152,521,4.799,522,4.248,523,3.969,524,4.09,525,4.248,526,3.152,527,4.248,528,3.152,529,2.827,530,4.518,531,4.248,532,3.152,533,4.248,534,4.248]],["title/interfaces/JwtPayload.html",[278,2.251,535,2.251]],["body/interfaces/JwtPayload.html",[3,0.341,4,0.341,5,0.296,7,0.535,11,0.026,16,1.395,23,0.341,29,0.022,30,0.022,96,0.913,129,3.323,278,3.782,296,1.779,314,2.21,364,2.21,366,2.831,370,3.476,371,5.372,385,4.72,474,2.013,535,3.117,536,4.685,537,3.956,538,3.956,539,4.685,540,4.685,541,4.685]],["title/injectables/JwtStrategy.html",[64,0.64,184,2.044]],["body/injectables/JwtStrategy.html",[3,0.279,4,0.279,5,0.242,7,0.437,8,1.35,11,0.027,13,0.811,15,1.033,16,0.779,17,0.548,18,0.62,23,0.279,24,0.014,25,1.806,27,1.35,29,0.019,30,0.019,64,0.946,65,1.56,74,1.723,83,1.952,85,1.676,94,1.656,95,1.175,96,0.883,97,1.26,98,1.676,117,1.267,129,1.952,184,3.024,189,2.548,197,2.841,220,1.676,221,2.548,222,2.245,225,2.361,251,3.024,273,3.713,275,2.119,284,1.356,293,1.56,295,2.314,296,1.9,297,1.454,300,1.952,305,3.233,306,2.548,314,2.361,315,3.233,318,2.314,319,2.314,344,3.233,362,2.548,368,2.841,385,2.841,436,3.233,439,3.233,517,3.024,529,2.548,542,3.233,543,5.005,544,5.005,545,3.829,546,5.005,547,3.829,548,3.829,549,3.829,550,3.829,551,3.233,552,3.829,553,3.829,554,3.829,555,3.829,556,3.829,557,2.548,558,3.829,559,3.829,560,3.829,561,3.829,562,3.829]],["title/classes/LoginDto.html",[24,0.013,81,2.251]],["body/classes/LoginDto.html",[3,0.303,4,0.303,5,0.263,7,0.475,10,2.005,11,0.027,13,0.855,16,1.242,17,0.49,23,0.303,24,0.02,29,0.02,30,0.02,62,3.513,81,3.513,85,2.671,88,1.885,96,0.788,129,3.332,142,1.58,175,3.86,269,3.888,341,3.513,353,3.687,355,3.513,471,1.822,474,1.871,487,3.21,491,2.922,492,2.121,563,3.513,564,3.918,565,3.918,566,3.513,567,3.918,568,4.161,569,4.459,570,3.513,571,3.918,572,4.459,573,4.161,574,3.918,575,3.513,576,3.513,577,3.513]],["title/injectables/PermissionDiscoveryService.html",[64,0.64,578,2.044]],["body/injectables/PermissionDiscoveryService.html",[0,0.539,2,0.578,3,0.111,4,0.111,5,0.096,7,0.174,8,0.678,11,0.027,13,0.797,15,1.199,16,1.07,17,0.412,18,0.247,23,0.111,24,0.009,26,2.461,27,1.453,29,0.01,30,0.01,53,0.776,64,0.475,65,0.62,74,1.701,88,0.777,91,1.129,94,1.063,95,1.105,96,0.48,97,0.809,98,0.667,104,1.286,117,1.687,133,1.787,157,2.482,210,3.309,220,1.101,222,1.416,225,1.948,245,1.129,253,1.638,257,1.52,258,0.842,275,0.842,281,1.013,282,0.92,284,2.155,291,1.129,293,2.195,297,1.22,300,1.902,306,1.013,312,1.286,320,0.92,321,2.123,325,1.286,332,1.286,358,2.592,363,1.282,364,2.645,366,2.254,367,2.768,369,1.129,416,1.286,422,1.407,432,2.748,446,2.748,456,2.123,474,0.891,578,1.52,579,3.785,580,1.286,581,3.15,582,3.731,583,2.515,584,2.515,585,3.731,586,3.756,587,3.731,588,1.522,589,4.448,590,4.706,591,2.515,592,1.522,593,1.52,594,2.515,595,1.522,596,3.731,597,2.515,598,1.522,599,1.522,600,1.522,601,1.522,602,2.515,603,1.673,604,1.013,605,0.92,606,1.129,607,1.013,608,1.522,609,3.213,610,1.522,611,1.522,612,1.522,613,3.998,614,1.522,615,1.866,616,3.488,617,1.522,618,1.286,619,1.522,620,1.522,621,1.522,622,1.522,623,3.213,624,1.286,625,1.522,626,1.286,627,1.522,628,1.522,629,1.522,630,2.515,631,1.522,632,2.515,633,1.522,634,1.129,635,1.522,636,1.522,637,2.515,638,1.286,639,1.52,640,2.515,641,1.522,642,1.522,643,1.522,644,2.515,645,2.515,646,4.448,647,3.131,648,1.522,649,2.515,650,2.515,651,1.522,652,2.515,653,2.713,654,1.522,655,1.522,656,2.515,657,1.522,658,1.522,659,3.731,660,1.522,661,1.522,662,1.013,663,1.522,664,1.286,665,1.522,666,1.522,667,1.522,668,1.522,669,1.522,670,3.15,671,1.522,672,1.522,673,1.522,674,1.522,675,4.448,676,2.123,677,2.515,678,1.522,679,1.522,680,2.515,681,2.515,682,1.522,683,2.123,684,3.213,685,2.515,686,3.731,687,2.384,688,1.286,689,1.522,690,1.522,691,1.522,692,3.213,693,1.522,694,1.522,695,1.286,696,1.522,697,1.522,698,1.522,699,2.515,700,1.522,701,1.522,702,2.713,703,1.522,704,1.522,705,1.522,706,1.522,707,1.522,708,1.522,709,3.3,710,2.515,711,2.123,712,1.286,713,2.123,714,1.286,715,4.13,716,1.286,717,1.286,718,1.522,719,3.213,720,1.522,721,2.515,722,1.522,723,2.515,724,1.522,725,1.522,726,1.522,727,3.731,728,1.522,729,1.522,730,3.082,731,3.731,732,1.522,733,2.515,734,2.515,735,2.515,736,2.515,737,2.515,738,2.515,739,2.515,740,2.515,741,1.522,742,1.522,743,2.515,744,2.515,745,1.522,746,1.522,747,1.522,748,1.522,749,2.515,750,1.522,751,1.522,752,1.522,753,1.013,754,1.522,755,1.522,756,1.286,757,1.522,758,1.522,759,1.522,760,1.522,761,1.522,762,2.515,763,2.515,764,2.515,765,2.515,766,1.522,767,1.129,768,1.286,769,1.286,770,2.123,771,1.286,772,1.866,773,2.123,774,1.522]],["title/guards/PermissionGuard.html",[775,2.509,776,1.378]],["body/guards/PermissionGuard.html",[3,0.286,4,0.286,5,0.249,7,0.449,8,1.374,11,0.027,13,0.825,15,1.062,17,0.524,18,0.638,23,0.286,24,0.015,27,1.524,29,0.02,30,0.02,53,2.007,64,0.963,74,1.746,83,2.007,85,2.474,94,1.686,95,1.197,96,0.761,97,1.283,210,2.82,220,2.231,284,2.117,293,1.603,297,1.494,320,2.379,358,2.474,364,1.857,422,1.723,499,2.379,519,4.434,520,2.92,521,4.705,523,3.781,524,3.976,526,2.92,532,2.92,593,3.079,607,2.619,776,2.076,777,2.92,778,3.324,779,4.192,780,2.819,781,3.936,782,3.936,783,3.936,784,2.619,785,5.096,786,3.324,787,3.324,788,3.324,789,3.936,790,2.92,791,3.936,792,3.936,793,3.936]],["title/guards/PermissionGuard-1.html",[557,1.882,775,2.099,776,1.152]],["body/guards/PermissionGuard-1.html",[3,0.181,4,0.181,5,0.157,7,0.283,8,0.997,11,0.027,13,0.599,15,0.67,17,0.541,18,0.599,23,0.181,24,0.009,26,3.032,27,1.478,29,0.014,30,0.014,53,1.266,64,0.699,74,1.364,83,1.266,85,1.618,94,1.222,95,0.868,96,0.552,97,0.93,117,1.877,133,0.943,207,1.5,210,3.141,220,1.618,222,1.856,225,2.082,234,3.628,273,1.842,275,1.374,281,2.459,282,1.5,284,2.149,293,2.129,295,2.955,296,1.676,297,2.155,300,2.493,314,1.171,320,2.667,331,2.096,358,2.141,360,2.045,362,1.652,363,1.266,364,2.811,365,3.12,366,2.955,367,2.742,369,1.842,370,1.842,373,3.12,374,2.096,375,2.096,376,1.842,377,2.096,380,2.096,381,2.742,417,2.742,422,1.087,432,2.459,440,3.12,446,1.652,474,0.88,499,1.5,519,3.628,520,1.842,521,4.066,523,2.742,524,3.253,526,1.842,529,1.652,532,1.842,581,3.727,593,2.233,603,2.459,604,1.652,605,1.5,607,1.652,613,2.742,615,1.842,616,2.096,624,2.096,626,2.096,639,2.233,653,2.096,670,2.096,676,3.12,683,2.096,702,2.096,753,1.652,776,1.505,777,1.842,786,2.096,787,2.096,794,2.096,795,3.695,796,3.275,797,3.43,798,2.483,799,2.483,800,2.045,801,1.842,802,1.374,803,2.483,804,2.096,805,1.842,806,2.096,807,2.096,808,5.227,809,2.483,810,2.483,811,2.483,812,2.483,813,4.792,814,2.483,815,4.414,816,2.096,817,2.096,818,2.483,819,3.695,820,2.483,821,2.483,822,3.695,823,3.695,824,4.414,825,3.695,826,2.096,827,2.483,828,2.483,829,3.12,830,2.096,831,2.096,832,2.483,833,2.483,834,2.483,835,2.483,836,2.483,837,2.483,838,2.483,839,2.483,840,2.483,841,2.096]],["title/controllers/PermissionManagementController.html",[0,1.198,842,2.251]],["body/controllers/PermissionManagementController.html",[0,1.06,2,1.136,3,0.218,4,0.218,5,0.189,7,0.341,8,1.141,10,2.138,11,0.027,13,0.912,15,1.519,16,1.326,17,0.522,18,0.485,23,0.218,24,0.011,25,1.412,27,1.519,29,0.016,30,0.016,56,1.526,57,1.991,58,1.991,72,1.991,74,2.04,88,1.308,94,1.766,95,1.373,96,0.945,97,1.344,98,2.465,133,1.136,135,1.991,136,3.551,242,1.808,251,3.533,253,3.064,284,1.06,293,1.219,358,1.31,360,2.342,604,1.991,605,1.808,647,1.991,662,3.747,687,3.14,709,2.22,730,1.808,772,3.14,776,1.724,779,2.22,780,1.996,784,1.991,790,2.22,842,2.816,843,4.936,844,2.22,845,4.91,846,4.146,847,4.507,848,4.232,849,4.146,850,2.992,851,4.232,852,2.992,853,2.527,854,4.232,855,2.992,856,4.232,857,2.992,858,2.992,859,4.232,860,2.992,861,2.527,862,4.232,863,2.992,864,2.992,865,2.22,866,2.22,867,2.22,868,1.808,869,2.22,870,2.992,871,2.22,872,2.992,873,2.992,874,2.527,875,2.527,876,2.527,877,2.527,878,2.527,879,2.527,880,2.527,881,2.527,882,2.527,883,2.527,884,2.527,885,2.992,886,2.992,887,2.992,888,2.527,889,2.992,890,2.992,891,2.992,892,2.992]],["title/injectables/PermissionManagementService.html",[64,0.64,780,1.595]],["body/injectables/PermissionManagementService.html",[3,0.153,4,0.089,5,0.078,7,0.417,8,0.567,11,0.027,13,0.931,15,1.533,16,1.349,17,0.395,18,0.34,23,0.089,24,0.005,27,1.581,29,0.008,30,0.008,64,0.397,65,0.501,74,2.048,85,0.538,88,1.006,94,1.832,95,1.377,96,0.858,97,1.394,98,2.346,117,1.606,133,1.236,207,0.743,210,2.77,220,0.92,221,0.818,222,1.236,225,0.991,234,2.957,242,1.967,251,1.967,253,2.552,257,0.743,258,0.68,275,0.68,281,1.398,282,0.743,284,2.014,291,1.559,293,2.492,295,3.104,296,0.467,297,1.236,300,1.66,314,1.88,358,2.191,360,2.206,362,1.398,363,2.389,364,2.527,366,1.663,376,0.912,379,1.038,381,1.559,417,0.912,422,1.601,458,0.818,494,1.967,557,1.831,579,4.309,593,1.967,634,0.912,638,1.038,639,1.663,647,0.818,662,3.995,664,2.749,687,2.416,709,3.714,711,1.775,712,1.038,713,3.089,714,1.775,716,1.038,717,1.038,730,1.967,769,1.775,770,2.749,771,1.038,772,2.416,773,1.775,780,0.991,790,2.042,796,2.042,797,2.712,800,1.163,801,0.912,802,0.68,807,1.038,813,2.324,817,1.775,826,1.038,830,1.038,831,1.038,846,1.775,847,2.749,849,1.775,853,1.775,861,1.775,875,1.038,876,1.038,877,1.038,878,1.038,879,1.038,880,1.038,881,1.038,882,1.038,883,1.038,884,1.038,888,2.324,893,1.038,894,2.101,895,2.101,896,2.101,897,2.101,898,2.101,899,1.775,900,3.256,901,3.256,902,1.775,903,2.101,904,2.101,905,2.101,906,2.752,907,2.101,908,1.23,909,2.101,910,1.23,911,3.596,912,2.101,913,1.23,914,2.101,915,1.23,916,2.101,917,1.23,918,1.23,919,2.101,920,1.23,921,1.775,922,1.23,923,1.23,924,1.23,925,1.23,926,2.101,927,1.23,928,2.101,929,2.101,930,1.23,931,2.101,932,1.23,933,1.23,934,3.79,935,1.23,936,2.101,937,1.23,938,1.23,939,2.749,940,2.042,941,1.23,942,1.23,943,2.101,944,3.658,945,1.23,946,1.038,947,1.23,948,0.818,949,1.038,950,1.23,951,1.23,952,1.23,953,1.23,954,1.23,955,2.101,956,1.23,957,1.23,958,1.23,959,1.23,960,1.23,961,2.101,962,2.101,963,1.23,964,1.23,965,2.101,966,2.101,967,2.101,968,1.23,969,2.101,970,2.752,971,1.23,972,1.23,973,1.23,974,1.23,975,1.23,976,1.23,977,1.23,978,1.23,979,1.23,980,1.23,981,1.23,982,1.23,983,1.23,984,1.23,985,1.23,986,1.23,987,2.752,988,2.752,989,1.23,990,2.101,991,1.23,992,1.23,993,1.23,994,1.038,995,1.23,996,1.23,997,2.752,998,1.038,999,1.23,1000,1.23,1001,1.23,1002,1.23,1003,1.23,1004,1.23,1005,2.101,1006,2.101,1007,2.101,1008,1.23,1009,1.23,1010,1.23,1011,1.23,1012,1.23,1013,1.23,1014,1.23,1015,1.23,1016,1.23,1017,1.23,1018,1.23]],["title/classes/Person.html",[24,0.013,296,1.284]],["body/classes/Person.html",[3,0.289,4,0.289,5,0.251,7,0.453,11,0.026,13,1.089,16,1.377,23,0.289,24,0.015,29,0.02,30,0.02,96,1.004,97,1.702,245,4.862,296,1.945,314,2.676,316,4.791,318,3.429,319,3.429,326,3.775,336,4.21,471,1.738,474,1.815,940,3.802,1019,3.353,1020,5.674,1021,4.791,1022,5.674,1023,5.674,1024,5.674,1025,3.97,1026,3.97,1027,3.97,1028,3.97,1029,3.97,1030,3.97,1031,3.97,1032,3.97,1033,3.97,1034,3.97,1035,3.97]],["title/controllers/PersonController.html",[0,1.198,1036,2.251]],["body/controllers/PersonController.html",[0,0.971,2,1.04,3,0.199,4,0.199,5,0.173,7,0.313,8,1.072,10,2.066,11,0.027,13,0.882,15,1.468,16,1.244,17,0.567,18,0.444,23,0.199,24,0.01,25,1.293,26,1.517,27,1.468,29,0.015,30,0.015,56,1.397,57,1.823,58,1.823,72,1.823,87,5.064,88,1.754,94,1.696,95,1.204,96,0.966,97,1.291,117,1.314,119,3.355,135,2.644,136,2.644,139,2.033,140,4.211,141,5.161,142,1.04,157,3.622,158,4.45,296,2.514,311,3.411,314,2.762,329,2.837,458,3.11,470,3.141,605,1.656,639,3.43,776,1.619,816,2.314,865,2.033,866,2.033,868,1.656,871,2.033,948,1.823,1036,2.644,1037,2.314,1038,3.973,1039,4.329,1040,3.355,1041,2.948,1042,2.314,1043,2.74,1044,4.674,1045,2.74,1046,2.74,1047,2.74,1048,2.74,1049,2.314,1050,2.74,1051,2.74,1052,4.674,1053,5.676,1054,2.74,1055,2.314,1056,2.74,1057,3.973,1058,2.74,1059,2.314,1060,3.624,1061,2.74,1062,2.74,1063,2.314,1064,2.587,1065,2.314,1066,2.948,1067,2.314,1068,3.973,1069,2.74,1070,2.74,1071,2.74,1072,2.74,1073,2.74,1074,2.74,1075,2.74,1076,2.74,1077,3.973,1078,2.74,1079,2.74,1080,2.74,1081,2.74,1082,2.74,1083,2.74,1084,2.74,1085,2.74,1086,2.74,1087,2.74,1088,2.74,1089,2.74]],["title/modules/PersonModule.html",[31,1.119,44,2.044]],["body/modules/PersonModule.html",[2,2.028,3,0.308,4,0.308,5,0.268,11,0.027,17,0.587,18,0.687,23,0.308,24,0.016,29,0.02,30,0.02,31,1.935,33,1.856,34,1.999,35,2.345,36,2.345,37,1.999,38,3.237,39,2.982,44,4.102,45,3.049,46,3.578,47,2.956,48,2.345,49,2.161,51,3.228,59,2.82,60,3.579,1036,3.893,1064,3.776,1065,3.579,1090,3.579,1091,4.238,1092,3.579,1093,3.579,1094,4.238,1095,4.238]],["title/injectables/PersonService.html",[64,0.64,1064,1.872]],["body/injectables/PersonService.html",[3,0.231,4,0.231,5,0.201,7,0.363,8,1.191,11,0.027,13,0.966,15,1.553,16,1.289,17,0.508,18,0.515,23,0.231,24,0.012,25,1.5,26,1.76,27,1.553,29,0.017,30,0.017,64,0.835,65,1.296,74,2.058,94,1.905,95,1.353,96,0.86,97,1.45,98,2.522,117,1.052,220,1.392,221,2.116,222,2.081,225,2.083,253,2.587,275,1.76,284,1.127,293,2.067,295,2.669,296,1.926,297,2.081,300,1.621,311,2.939,313,3.729,314,2.94,329,2.444,360,1.76,363,1.621,368,2.36,422,1.934,470,3.299,639,1.922,946,2.686,948,2.116,1021,4.284,1039,4.629,1040,3.729,1041,3.277,1042,3.729,1049,3.729,1055,3.729,1059,3.729,1060,3.767,1064,2.444,1066,3.277,1067,2.686,1096,2.686,1097,3.18,1098,3.18,1099,3.18,1100,3.18,1101,3.18,1102,3.18,1103,3.18,1104,3.18,1105,3.18,1106,3.18,1107,3.18,1108,4.416]],["title/modules/PrismaModule.html",[31,1.119,45,1.595]],["body/modules/PrismaModule.html",[3,0.338,4,0.338,5,0.294,11,0.026,17,0.525,18,0.753,23,0.338,24,0.017,29,0.022,30,0.022,31,2.017,33,2.036,34,2.193,35,2.573,36,2.573,37,2.193,38,3.375,39,3.109,45,3.158,47,3.131,48,2.573,49,2.37,222,2.621,1109,3.926,1110,3.926,1111,3.926,1112,4.649,1113,4.649]],["title/injectables/PrismaService.html",[64,0.64,222,1.284]],["body/injectables/PrismaService.html",[3,0.333,4,0.333,5,0.29,7,0.523,8,1.512,11,0.027,13,0.908,15,1.512,17,0.52,18,0.742,23,0.333,24,0.017,29,0.021,30,0.021,64,1.06,65,1.865,74,2.036,222,2.128,293,2.283,517,3.387,586,5.564,606,3.397,607,3.047,1114,3.867,1115,5.115,1116,6.589,1117,4.579,1118,4.579,1119,4.579,1120,4.579]],["title/modules/RbacModule.html",[31,1.119,46,1.872]],["body/modules/RbacModule.html",[2,1.869,3,0.272,4,0.272,5,0.236,11,0.027,17,0.607,18,0.605,23,0.272,24,0.014,29,0.019,30,0.019,31,1.822,33,1.635,34,1.762,35,2.067,36,2.067,37,1.762,38,3.048,39,2.808,45,2.948,46,3.73,47,2.725,48,2.067,49,1.904,51,2.975,53,1.904,59,2.485,578,4.05,776,2.635,780,3.161,784,2.485,800,2.067,802,2.067,804,3.153,805,2.771,806,3.153,842,3.665,867,2.771,869,3.653,1121,3.153,1122,3.153,1123,3.734,1124,3.153,1125,3.734,1126,3.665,1127,4.924,1128,3.734,1129,3.153,1130,3.734,1131,4.924,1132,3.734,1133,3.734,1134,3.153]],["title/modules/RedisCacheModule.html",[31,1.119,1135,2.509]],["body/modules/RedisCacheModule.html",[3,0.323,4,0.323,5,0.281,11,0.027,17,0.595,18,0.72,23,0.323,24,0.017,29,0.021,30,0.021,31,1.821,33,1.946,39,2.266,51,3.326,74,1.374,96,0.664,192,4.647,193,4.635,194,2.958,199,3.753,207,2.686,269,2.686,297,1.688,797,2.686,800,3.046,802,2.46,1129,4.647,1134,3.753,1135,4.083,1136,4.445,1137,4.445,1138,5.503,1139,4.083,1140,4.647,1141,4.445,1142,4.445,1143,4.445,1144,4.445,1145,4.445,1146,4.445,1147,4.445,1148,4.445,1149,4.445,1150,4.445,1151,4.445]],["title/injectables/RedisHealthIndicator.html",[64,0.64,1152,2.509]],["body/injectables/RedisHealthIndicator.html",[3,0.28,4,0.28,5,0.244,7,0.44,8,1.355,11,0.027,13,0.814,15,1.039,16,1.139,17,0.57,18,0.814,23,0.28,24,0.014,26,2.132,27,1.039,29,0.019,30,0.019,64,0.95,65,1.569,74,1.728,94,1.662,95,1.18,96,0.75,97,1.265,117,1.275,207,2.328,210,2.132,220,1.687,258,2.781,284,1.981,293,2.278,300,1.964,320,3.38,328,3.253,422,1.687,432,2.564,446,2.564,517,3.037,529,2.564,593,3.037,613,3.729,615,2.859,796,3.729,797,3.715,800,2.781,801,2.859,802,2.132,841,3.253,1139,2.859,1152,3.729,1153,3.253,1154,5.593,1155,5.025,1156,3.853,1157,3.853,1158,5.025,1159,3.853,1160,3.853,1161,3.853,1162,5.025,1163,3.253,1164,3.853,1165,3.853,1166,3.853,1167,3.853,1168,5.593,1169,3.853,1170,3.853,1171,5.025,1172,5.025]],["title/classes/RefreshTokenDto.html",[24,0.013,100,2.251]],["body/classes/RefreshTokenDto.html",[3,0.332,4,0.332,5,0.289,7,0.521,10,1.734,11,0.026,13,0.74,16,1.139,17,0.519,23,0.332,24,0.021,29,0.021,30,0.021,77,4.679,88,1.412,96,0.682,100,3.724,108,4.152,110,4.801,117,1.851,142,1.734,353,2.76,425,5.109,471,2,474,1.983,475,3.389,487,3.097,489,4.726,491,3.097,492,2.329,499,3.382,1173,4.726,1174,3.857,1175,5.596,1176,4.568,1177,4.568]],["title/classes/RegisterDto.html",[24,0.013,115,2.251]],["body/classes/RegisterDto.html",[3,0.231,4,0.231,5,0.2,7,0.362,10,2.078,11,0.027,13,0.887,16,1.268,17,0.409,23,0.231,24,0.016,29,0.017,30,0.017,62,2.932,85,2.727,88,1.925,95,1.463,96,0.817,97,1.378,115,2.932,129,3.114,142,1.203,175,3.37,242,2.662,269,3.763,318,3.06,319,3.06,341,2.932,353,3.87,355,2.932,422,1.929,471,1.388,474,1.561,480,3.72,483,3.72,487,3.183,490,3.757,491,3.029,492,1.616,499,3.307,564,4.061,565,3.269,566,2.676,567,3.269,569,3.72,570,2.676,571,4.418,572,4.857,574,3.269,575,2.676,576,3.642,577,2.676,753,3.642,1178,2.676,1179,3.169,1180,4.406,1181,3.169,1182,4.406,1183,4.406,1184,3.169,1185,3.169,1186,4.406,1187,4.406,1188,4.406,1189,4.406,1190,4.406,1191,6.228,1192,4.406,1193,5.473,1194,4.406,1195,4.406,1196,4.406,1197,3.169,1198,3.169,1199,3.169,1200,4.406]],["title/controllers/RoleManagementController.html",[0,1.198,1126,2.251]],["body/controllers/RoleManagementController.html",[0,0.918,2,0.984,3,0.189,4,0.189,5,0.164,7,0.296,8,1.029,10,2.113,11,0.027,13,0.902,15,1.501,16,1.331,17,0.534,18,0.42,23,0.189,24,0.01,25,1.223,27,1.501,29,0.015,30,0.015,56,1.322,57,1.725,58,1.725,72,1.725,74,2.031,85,1.67,94,1.761,95,1.25,96,0.928,97,1.34,98,2.437,117,1.262,135,2.539,136,3.323,139,1.923,140,4.27,142,0.984,157,3.704,242,1.566,251,3.364,253,3.168,311,2.539,329,2.111,358,1.982,360,2.505,363,3.01,458,1.725,494,3.017,508,3.222,604,1.725,605,1.566,662,4.078,767,1.923,776,1.554,779,1.923,780,1.8,784,1.725,844,1.923,865,1.923,866,1.923,867,1.923,868,1.566,869,1.923,871,1.923,874,2.189,899,3.222,902,4.216,911,4.216,921,2.189,934,2.189,939,2.189,940,1.923,948,1.725,949,2.189,1041,2.831,1063,2.189,1126,2.539,1201,4.859,1202,4.527,1203,4.527,1204,4.527,1205,4.527,1206,2.592,1207,2.592,1208,3.815,1209,2.592,1210,2.592,1211,2.592,1212,2.592,1213,2.592,1214,2.592,1215,2.592,1216,2.592,1217,2.592,1218,2.592,1219,2.592,1220,2.592,1221,3.815,1222,2.592,1223,2.592,1224,2.592,1225,2.592,1226,4.527,1227,3.815,1228,2.592,1229,2.592,1230,2.592,1231,2.592,1232,2.592,1233,2.592,1234,2.592,1235,2.592,1236,2.592,1237,3.815,1238,4.527,1239,2.592,1240,2.592,1241,2.592,1242,2.592,1243,2.592,1244,2.592,1245,2.592,1246,2.592,1247,3.815,1248,3.815,1249,2.592,1250,2.592,1251,2.592,1252,2.592]],["title/classes/UpdatePersonDto.html",[24,0.013,1060,2.044]],["body/classes/UpdatePersonDto.html",[3,0.359,4,0.359,5,0.312,11,0.026,17,0.544,23,0.359,24,0.018,29,0.022,30,0.022,142,1.875,284,2.078,326,3.904,329,2.733,470,2.733,471,2.162,473,3.664,517,3.545,1060,3.545,1066,3.664,1253,4.171,1254,6.259,1255,5.867,1256,4.939]],["title/classes/VerifyEmailDto.html",[24,0.013,125,2.251]],["body/classes/VerifyEmailDto.html",[3,0.295,4,0.295,5,0.257,7,0.463,10,1.973,11,0.027,13,0.842,16,1.231,17,0.482,23,0.295,24,0.019,29,0.02,30,0.02,62,3.458,88,1.868,96,0.776,125,3.458,128,3.011,129,3.356,132,4.485,133,2.468,142,1.541,175,4.022,353,3.653,355,3.458,471,1.777,474,1.841,487,3.173,491,2.876,492,2.069,564,3.856,565,3.856,567,3.856,571,3.856,574,3.856,576,3.458,1257,4.841,1258,3.427,1259,5.197,1260,5.197,1261,4.059,1262,5.105,1263,5.197,1264,4.059,1265,4.059,1266,4.059,1267,4.059,1268,4.059]],["title/coverage.html",[1269,3.89]],["body/coverage.html",[0,1.969,1,1.925,5,0.183,6,2.443,11,0.027,19,1.601,21,1.925,24,0.023,29,0.016,30,0.016,37,2.622,56,1.475,64,1.171,66,2.443,70,1.925,71,2.443,81,1.925,88,0.894,95,0.679,96,0.432,100,1.925,115,1.925,117,0.957,125,1.925,133,1.098,143,1.601,184,1.748,208,2.443,222,1.098,225,1.364,278,1.925,296,1.098,470,1.601,472,2.443,473,3.065,494,1.748,495,2.443,496,2.443,515,2.443,516,2.443,528,2.146,535,1.925,537,2.443,538,2.443,542,2.443,563,2.443,578,1.748,579,3.065,580,2.443,603,1.925,647,4.645,730,1.748,775,3.065,776,1.683,778,2.443,780,1.364,794,2.443,842,1.925,843,2.443,844,3.065,868,1.748,893,2.443,1019,2.443,1036,1.925,1037,2.443,1060,1.748,1064,1.601,1096,2.443,1114,2.443,1126,1.925,1152,2.146,1153,2.443,1173,2.443,1174,2.443,1178,2.443,1201,2.443,1253,2.443,1257,2.443,1258,2.443,1269,2.443,1270,2.443,1271,2.893,1272,2.893,1273,4.819,1274,4.819,1275,2.893,1276,2.893,1277,2.443,1278,2.443,1279,6.477,1280,2.443,1281,6.72,1282,2.443,1283,2.443,1284,3.488,1285,5.951,1286,5.256,1287,2.893,1288,2.443,1289,5.781,1290,2.893,1291,4.131,1292,3.488,1293,3.488,1294,2.893,1295,2.893,1296,2.443,1297,4.415,1298,4.415,1299,2.443,1300,3.488,1301,3.065,1302,3.065,1303,2.443,1304,2.443,1305,2.893,1306,2.893]],["title/dependencies.html",[34,1.918,1307,2.389]],["body/dependencies.html",[11,0.027,18,0.665,24,0.02,29,0.02,30,0.02,34,1.936,53,2.093,142,1.558,152,3.884,187,3.045,189,2.731,194,2.731,197,3.884,276,3.466,277,3.466,282,2.48,492,2.093,551,4.42,606,3.045,768,3.466,797,3.163,800,3.359,802,2.272,1139,3.884,1140,4.42,1163,3.466,1308,4.105,1309,5.764,1310,4.105,1311,4.105,1312,4.105,1313,4.105,1314,4.105,1315,5.235,1316,4.105,1317,4.105,1318,4.105,1319,4.105,1320,4.105,1321,4.105,1322,4.105,1323,4.105,1324,4.105,1325,4.105,1326,5.235,1327,4.105,1328,4.105,1329,4.105,1330,4.105,1331,4.105,1332,4.105,1333,4.105,1334,4.105,1335,4.105,1336,4.105,1337,4.105,1338,4.105,1339,4.105,1340,4.105,1341,4.105,1342,4.105,1343,4.105,1344,4.105,1345,4.105,1346,4.105,1347,4.105,1348,4.105,1349,4.105]],["title/miscellaneous/functions.html",[1350,1.882,1351,3.433]],["body/miscellaneous/functions.html",[7,0.555,11,0.022,29,0.022,30,0.022,37,3.3,1288,4.104,1296,4.104,1297,3.606,1298,4.311,1299,4.104,1300,5.438,1301,3.606,1302,4.311,1303,5.249,1304,4.104,1350,3.234,1351,4.104,1352,4.86,1353,4.86,1354,4.104,1355,4.86,1356,4.86,1357,4.104]],["title/index.html",[7,0.323,1358,2.389,1359,2.389]],["body/index.html",[11,0.026,29,0.019,30,0.019,83,1.952,133,1.9,329,2.77,493,3.233,576,2.548,618,3.233,634,2.841,688,3.233,695,3.233,756,3.233,767,3.713,829,3.233,994,4.708,998,3.233,1270,4.993,1358,4.708,1359,4.708,1360,4.708,1361,4.708,1362,2.841,1363,3.829,1364,3.829,1365,3.829,1366,3.829,1367,3.829,1368,3.829,1369,3.829,1370,3.829,1371,3.829,1372,5.913,1373,3.829,1374,5.005,1375,5.005,1376,5.913,1377,3.829,1378,5.005,1379,3.829,1380,3.829,1381,5.005,1382,5.005,1383,3.233,1384,5.576,1385,3.829,1386,3.829,1387,3.829,1388,3.829,1389,3.829,1390,3.829,1391,3.829,1392,3.829,1393,3.829,1394,3.829,1395,5.576,1396,3.829,1397,3.829,1398,3.829,1399,3.233,1400,3.829,1401,3.829,1402,3.829,1403,5.005,1404,3.829,1405,3.829,1406,3.829,1407,5.005,1408,5.005,1409,5.576,1410,5.576,1411,3.829,1412,3.829,1413,3.829,1414,3.829,1415,3.829,1416,3.829,1417,5.005,1418,3.829,1419,3.829,1420,3.829,1421,3.829,1422,5.005,1423,3.829,1424,5.005,1425,3.829,1426,5.005,1427,3.829,1428,3.829,1429,3.233,1430,3.829,1431,3.829,1432,3.829]],["title/modules.html",[33,2.017]],["body/modules.html",[11,0.023,29,0.023,30,0.023,32,3.332,33,2.192,43,3.026,44,3.026,45,2.362,46,2.771,1135,3.715,1399,5.604,1433,6.636,1434,6.636,1435,6.727,1436,5.007,1437,5.007]],["title/overview.html",[1362,3.418]],["body/overview.html",[2,1.387,11,0.027,19,3.015,29,0.019,30,0.019,31,1.208,32,4.444,33,1.599,34,1.723,35,2.021,36,2.021,37,1.723,38,2.021,39,1.862,40,3.084,41,3.084,42,3.084,43,4.009,44,3.976,45,3.073,46,3.718,47,2.685,48,2.021,49,1.862,65,1.488,143,3.508,180,3.084,182,3.084,183,3.084,184,3.83,222,2.406,341,2.43,471,1.599,535,2.43,557,2.43,578,3.83,753,2.43,776,2.364,777,2.71,780,2.99,805,2.71,1064,3.508,1090,3.084,1092,3.084,1093,3.084,1109,3.084,1110,3.084,1111,3.084,1121,3.084,1122,3.084,1124,3.084,1262,3.084,1362,2.71,1438,3.652]],["title/properties.html",[474,1.44,1307,2.389]],["body/properties.html",[11,0.026,29,0.023,30,0.023,88,1.614,474,1.85,1360,4.41,1361,4.41,1383,4.41,1429,4.41,1439,5.222,1440,5.222,1441,5.222,1442,5.222,1443,5.222]],["title/miscellaneous/variables.html",[1350,1.882,1444,3.433]],["body/miscellaneous/variables.html",[7,0.46,11,0.027,16,1.228,21,3.444,27,1.087,29,0.02,30,0.02,83,2.056,88,1.599,95,1.215,96,0.773,98,1.765,117,1.334,133,1.965,225,2.441,253,2.056,257,3.922,258,3.591,284,1.428,297,1.531,358,2.266,364,2.696,524,2.683,528,3.84,530,3.405,603,3.444,730,3.127,788,3.405,868,3.127,1115,3.405,1277,3.405,1278,4.37,1280,4.37,1282,3.405,1283,4.37,1284,3.405,1292,3.405,1293,4.826,1297,2.991,1298,4.815,1301,2.991,1302,3.84,1350,2.683,1354,5.389,1357,3.405,1444,3.405,1445,4.032,1446,5.175,1447,5.175,1448,4.032,1449,4.032,1450,4.032,1451,4.032,1452,4.032,1453,4.032,1454,4.032]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":647,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1440,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1333,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1343,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1332,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1338,"title":{},"body":{"dependencies.html":{}}}],["0.7.34",{"_index":1324,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1281,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1290,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1273,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1295,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1285,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1287,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1286,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1274,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1291,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1294,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":557,"title":{"guards/PermissionGuard-1.html":{}},"body":{"injectables/JwtStrategy.html":{},"injectables/PermissionManagementService.html":{},"overview.html":{}}}],["10",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RedisHealthIndicator.html":{}}}],["10.0.0",{"_index":1309,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1312,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1311,"title":{},"body":{"dependencies.html":{}}}],["10.2.3",{"_index":1317,"title":{},"body":{"dependencies.html":{}}}],["10.4.3",{"_index":1334,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["11.0.3",{"_index":1349,"title":{},"body":{"dependencies.html":{}}}],["123456",{"_index":1259,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["15m",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["2",{"_index":753,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"classes/RegisterDto.html":{},"overview.html":{}}}],["2.0.4",{"_index":1322,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1337,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1308,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":1340,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PersonController.html":{}}}],["201",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PersonController.html":{}}}],["21",{"_index":1275,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["3.0.1",{"_index":1329,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":1310,"title":{},"body":{"dependencies.html":{}}}],["3/14",{"_index":1276,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["300",{"_index":804,"title":{},"body":{"guards/PermissionGuard-1.html":{},"modules/RbacModule.html":{}}}],["4.0.1",{"_index":1326,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1315,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["401",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":1053,"title":{},"body":{"controllers/PersonController.html":{}}}],["5",{"_index":805,"title":{},"body":{"guards/PermissionGuard-1.html":{},"modules/RbacModule.html":{},"overview.html":{}}}],["5.0.1",{"_index":1347,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1320,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1327,"title":{},"body":{"dependencies.html":{}}}],["5.4.1",{"_index":1336,"title":{},"body":{"dependencies.html":{}}}],["5.7.6",{"_index":1328,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1262,"title":{},"body":{"classes/VerifyEmailDto.html":{},"overview.html":{}}}],["6.1.0",{"_index":1318,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["7.8.1",{"_index":1345,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"overview.html":{}}}],["8.1.0",{"_index":1316,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1438,"title":{},"body":{"overview.html":{}}}],["a.category",{"_index":757,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["a.category.localecompare(b.category",{"_index":760,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["a.name.localecompare(b.name",{"_index":759,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["acc",{"_index":772,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["acc.add(rolebitfield",{"_index":977,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["acc.add(rolebits",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["acc.plus(rolebits",{"_index":828,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["acc[permission.category",{"_index":773,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["acc[permission.category].permissions.push(permission",{"_index":952,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["acc[permission.category].push(permission",{"_index":774,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["access",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["access_token",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstoken",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenpayload",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":476,"title":{},"body":{"classes/CreatePersonDto.html":{}}}],["accounting",{"_index":1373,"title":{},"body":{"index.html":{}}}],["accountstatus",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/Person.html":{}}}],["action",{"_index":731,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["action.tolowercase",{"_index":737,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["active",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{}}}],["active'})@isoptional()@isstring",{"_index":477,"title":{},"body":{"classes/CreatePersonDto.html":{}}}],["actual",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{}}}],["add",{"_index":638,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["added",{"_index":680,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["adding",{"_index":648,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["address",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["address'})@apiresponse({status",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["address'})@isemail",{"_index":566,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["admin",{"_index":624,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["admin.ts",{"_index":1302,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["agent",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["ago",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["already",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{}}}],["api",{"_index":1409,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":1068,"title":{},"body":{"controllers/PersonController.html":{}}}],["apioperation",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["apiproperty",{"_index":487,"title":{},"body":{"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["apiproperty({description",{"_index":475,"title":{},"body":{"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"classes/RefreshTokenDto.html":{}}}],["apiproperty({example",{"_index":564,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["apipropertyoptional",{"_index":488,"title":{},"body":{"classes/CreatePersonDto.html":{}}}],["apipropertyoptional({description",{"_index":479,"title":{},"body":{"classes/CreatePersonDto.html":{}}}],["apiresponse",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PersonController.html":{}}}],["apitags",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["apitags('authentication",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('people",{"_index":1072,"title":{},"body":{"controllers/PersonController.html":{}}}],["apitags('role",{"_index":1230,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["app",{"_index":620,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["app.controller",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":32,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":19,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arabic",{"_index":480,"title":{},"body":{"classes/CreatePersonDto.html":{},"classes/RegisterDto.html":{}}}],["architecture",{"_index":1415,"title":{},"body":{"index.html":{}}}],["asc",{"_index":770,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["assign",{"_index":508,"title":{},"body":{"classes/CreateRoleDto.html":{},"controllers/RoleManagementController.html":{}}}],["assignrole",{"_index":1202,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["assignrole(userid",{"_index":1206,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["assignroletouser",{"_index":894,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["assignroletouser(userid",{"_index":909,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["async",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"injectables/PrismaService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"controllers/RoleManagementController.html":{}}}],["atomicity",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["attached",{"_index":559,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["auth.guard.ts",{"_index":516,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:12",{"_index":525,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:7",{"_index":522,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/public.decorator",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{}}}],["auth/guards/jwt",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["auth/guards/permission.guard",{"_index":1069,"title":{},"body":{"controllers/PersonController.html":{}}}],["authcontroller",{"_index":70,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":810,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["authentication",{"_index":493,"title":{},"body":{"classes/CreatePersonDto.html":{},"index.html":{}}}],["authentication'})@isnotempty()@isstring",{"_index":485,"title":{},"body":{"classes/CreatePersonDto.html":{}}}],["authguard",{"_index":527,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":518,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":43,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authservice",{"_index":143,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":655,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["available",{"_index":1437,"title":{},"body":{"modules.html":{}}}],["await",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"injectables/PrismaService.html":{},"injectables/RedisHealthIndicator.html":{}}}],["b",{"_index":756,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"index.html":{}}}],["b.category",{"_index":758,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["backend",{"_index":1441,"title":{},"body":{"properties.html":{}}}],["bad",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('email",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["banking",{"_index":1372,"title":{},"body":{"index.html":{}}}],["based",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["bawes",{"_index":1360,"title":{},"body":{"index.html":{},"properties.html":{}}}],["bcrypt",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(data.password",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["bearer",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["bigint",{"_index":540,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["bitfield",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["bitfields",{"_index":972,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["bitwise",{"_index":824,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["body",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["boolean",{"_index":940,"title":{},"body":{"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/RoleManagementController.html":{}}}],["bootstrap",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["branch",{"_index":1422,"title":{},"body":{"index.html":{}}}],["break",{"_index":706,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["browse",{"_index":1435,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1433,"title":{},"body":{"modules.html":{}}}],["built",{"_index":1367,"title":{},"body":{"index.html":{}}}],["business",{"_index":1370,"title":{},"body":{"index.html":{}}}],["cache",{"_index":797,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"dependencies.html":{}}}],["cache.module.ts",{"_index":1137,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["cache_manager",{"_index":801,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/RedisHealthIndicator.html":{}}}],["cache_ttl",{"_index":795,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["cachekey",{"_index":811,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["cachekey}:${requiredpermission",{"_index":815,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["cachemanager",{"_index":796,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/RedisHealthIndicator.html":{}}}],["cachemodule",{"_index":1129,"title":{},"body":{"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{}}}],["cachemodule.register",{"_index":1133,"title":{},"body":{"modules/RbacModule.html":{}}}],["cachemodule.registerasync",{"_index":1142,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["calculate",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["calculateeffectivepermissions",{"_index":895,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["calculateeffectivepermissions(personid",{"_index":912,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["canactivate",{"_index":519,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{}}}],["canactivate(context",{"_index":523,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{}}}],["case",{"_index":700,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["cat",{"_index":878,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["cat.permissions.length",{"_index":879,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["catch",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/RedisHealthIndicator.html":{}}}],["categories",{"_index":687,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["categories.join",{"_index":691,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["categories.reduce",{"_index":877,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["category",{"_index":730,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["category.tolowercase",{"_index":738,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["cd",{"_index":1387,"title":{},"body":{"index.html":{}}}],["centralized",{"_index":1396,"title":{},"body":{"index.html":{}}}],["chalk",{"_index":1330,"title":{},"body":{"dependencies.html":{}}}],["changes",{"_index":688,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"index.html":{}}}],["character",{"_index":1196,"title":{},"body":{"classes/RegisterDto.html":{}}}],["characters",{"_index":571,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["check",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"injectables/RedisHealthIndicator.html":{}}}],["checkhealth",{"_index":1155,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["checkhealth(key",{"_index":1158,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["checkout",{"_index":1423,"title":{},"body":{"index.html":{}}}],["checks",{"_index":789,"title":{},"body":{"guards/PermissionGuard.html":{}}}],["checks.every(boolean",{"_index":793,"title":{},"body":{"guards/PermissionGuard.html":{}}}],["class",{"_index":24,"title":{"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"classes/LoginDto.html":{},"classes/Person.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":471,"title":{},"body":{"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"classes/LoginDto.html":{},"classes/Person.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{},"overview.html":{}}}],["classpermission",{"_index":727,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["classpermission.split",{"_index":732,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["cleanup",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["cleanupexpiredtokens",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["clear",{"_index":997,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["clearpermissioncache",{"_index":896,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["clearpermissioncache(roleid",{"_index":914,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["clearuserpermissioncache",{"_index":897,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["clearuserpermissioncache(userid",{"_index":916,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["click",{"_index":1390,"title":{},"body":{"index.html":{}}}],["clone",{"_index":1382,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_personmodule",{"_index":1090,"title":{},"body":{"modules/PersonModule.html":{},"overview.html":{}}}],["cluster_personmodule_exports",{"_index":1092,"title":{},"body":{"modules/PersonModule.html":{},"overview.html":{}}}],["cluster_personmodule_imports",{"_index":1091,"title":{},"body":{"modules/PersonModule.html":{}}}],["cluster_personmodule_providers",{"_index":1093,"title":{},"body":{"modules/PersonModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1109,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1110,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1111,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_rbacmodule",{"_index":1121,"title":{},"body":{"modules/RbacModule.html":{},"overview.html":{}}}],["cluster_rbacmodule_exports",{"_index":1124,"title":{},"body":{"modules/RbacModule.html":{},"overview.html":{}}}],["cluster_rbacmodule_imports",{"_index":1123,"title":{},"body":{"modules/RbacModule.html":{}}}],["cluster_rbacmodule_providers",{"_index":1122,"title":{},"body":{"modules/RbacModule.html":{},"overview.html":{}}}],["code",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["codepermissions",{"_index":628,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["codepermissions.filter",{"_index":641,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["codepermissions.length",{"_index":632,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["codepermissions.some((cp",{"_index":674,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["codes",{"_index":507,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["coding",{"_index":1405,"title":{},"body":{"index.html":{}}}],["color",{"_index":497,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["combine",{"_index":971,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["combined",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"guards/PermissionGuard-1.html":{}}}],["completed",{"_index":612,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["comprehensive",{"_index":1363,"title":{},"body":{"index.html":{}}}],["concepts",{"_index":1414,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{},"modules/RedisCacheModule.html":{}}}],["configservice",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/RedisCacheModule.html":{}}}],["configservice.get",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('redis_host",{"_index":1144,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["configservice.get('redis_max_memory",{"_index":1150,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["configservice.get('redis_password",{"_index":1147,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["configservice.get('redis_port",{"_index":1146,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["configservice.get('redis_ttl",{"_index":1148,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["connect",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{},"classes/UpdatePersonDto.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":704,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["constructor",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{}}}],["constructor(@inject(cache_manager",{"_index":1164,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["constructor(cachemanager",{"_index":1156,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["constructor(discoveryservice",{"_index":588,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["constructor(prisma",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{}}}],["constructor(private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"controllers/RoleManagementController.html":{}}}],["constructor(reflector",{"_index":520,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{}}}],["contain",{"_index":1190,"title":{},"body":{"classes/RegisterDto.html":{}}}],["container",{"_index":1392,"title":{},"body":{"index.html":{}}}],["context",{"_index":526,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{}}}],["context.getclass",{"_index":533,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":532,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{}}}],["context.switchtohttp().getrequest",{"_index":787,"title":{},"body":{"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{}}}],["contributing",{"_index":1420,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('people",{"_index":1073,"title":{},"body":{"controllers/PersonController.html":{}}}],["controller('permissions",{"_index":870,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["controller('roles",{"_index":1231,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"modules/RbacModule.html":{},"controllers/RoleManagementController.html":{},"overview.html":{}}}],["controllers.foreach((wrapper",{"_index":718,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["controllers/permission",{"_index":1130,"title":{},"body":{"modules/RbacModule.html":{}}}],["controllers/role",{"_index":1132,"title":{},"body":{"modules/RbacModule.html":{}}}],["convert",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["cookie",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["core",{"_index":1413,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1269,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":642,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["cp.code",{"_index":645,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["create",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"index.html":{}}}],["create(@body",{"_index":1075,"title":{},"body":{"controllers/PersonController.html":{}}}],["create(createpersondto",{"_index":1042,"title":{},"body":{"controllers/PersonController.html":{},"injectables/PersonService.html":{}}}],["createadmin",{"_index":1303,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createcategory",{"_index":845,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["createcategory(data",{"_index":850,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["createdat",{"_index":1020,"title":{},"body":{"classes/Person.html":{}}}],["createdpermissions",{"_index":658,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["createdpermissions.map((p",{"_index":661,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["createparamdecorator",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpermission",{"_index":846,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["createpermission(data",{"_index":853,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["createpermissioncategory",{"_index":898,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["createpermissioncategory(data",{"_index":919,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["createpersondto",{"_index":470,"title":{"classes/CreatePersonDto.html":{}},"body":{"classes/CreatePersonDto.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"classes/UpdatePersonDto.html":{},"coverage.html":{}}}],["createrole",{"_index":899,"title":{},"body":{"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{}}}],["createrole(@body",{"_index":1234,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["createrole(data",{"_index":921,"title":{},"body":{"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{}}}],["createroledto",{"_index":494,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{},"coverage.html":{}}}],["creating",{"_index":960,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["credentials",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["ctx",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cuid",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["currency",{"_index":1398,"title":{},"body":{"index.html":{}}}],["currentuser",{"_index":1280,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"controllers/RoleManagementController.html":{},"miscellaneous/variables.html":{}}}],["data.description",{"_index":962,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["data.email",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.enabled",{"_index":1241,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["data.name",{"_index":961,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["data.namear",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.nameen",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.permissioncode",{"_index":1240,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["data.permissionids",{"_index":890,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["data.permissions",{"_index":985,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["data.permissions?.length",{"_index":984,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["data.position",{"_index":1245,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["data.roleid",{"_index":1250,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["data.sortorder",{"_index":963,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["database",{"_index":683,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["date",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"classes/Person.html":{}}}],["date(date.now",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(now.gettime",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["days",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["db",{"_index":635,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["dbpermissions",{"_index":636,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["dbpermissions.filter",{"_index":672,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["dbpermissions.length",{"_index":682,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["dbpermissions.some((dp",{"_index":643,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["decimal",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["decimal(0",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["decimal(1",{"_index":717,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["decimal(lastpermission.bitfield).mul(2",{"_index":716,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["decimal(perm.permission.bitfield",{"_index":976,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["decimal(permission.bitfield",{"_index":831,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["decimal(rp.permission.bitfield",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{}}}],["decimal.js",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"dependencies.html":{}}}],["declarations",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"overview.html":{}}}],["decoded",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded.jti",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"classes/LoginDto.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/VerifyEmailDto.html":{}}}],["decorators/public.decorator",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/require",{"_index":604,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"controllers/RoleManagementController.html":{}}}],["default",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/PrismaService.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/VerifyEmailDto.html":{}}}],["delete",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["delete(':id",{"_index":1086,"title":{},"body":{"controllers/PersonController.html":{}}}],["delete(':id')@requirepermission('people.delete')@apioperation({summary",{"_index":1056,"title":{},"body":{"controllers/PersonController.html":{}}}],["delete('users/:userid/roles/:roleid",{"_index":1251,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["delete('users/:userid/roles/:roleid')@apioperation({summary",{"_index":1217,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["denied",{"_index":839,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["dependencies",{"_index":34,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":670,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["desc",{"_index":714,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["description",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["design",{"_index":1416,"title":{},"body":{"index.html":{}}}],["designed",{"_index":1369,"title":{},"body":{"index.html":{}}}],["detailed",{"_index":1377,"title":{},"body":{"index.html":{}}}],["development",{"_index":1403,"title":{},"body":{"index.html":{}}}],["device",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["devicedetails",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["discover",{"_index":761,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discovered",{"_index":631,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discoverpermissions",{"_index":582,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discovery",{"_index":609,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discovery.service",{"_index":1128,"title":{},"body":{"modules/RbacModule.html":{}}}],["discovery.service.ts",{"_index":580,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"coverage.html":{}}}],["discovery.service.ts:10",{"_index":591,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discovery.service.ts:145",{"_index":592,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discovery.service.ts:18",{"_index":600,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discovery.service.ts:250",{"_index":598,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discovery.service.ts:257",{"_index":595,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discovery.service.ts:265",{"_index":599,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discovery.service.ts:30",{"_index":601,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["discoverymodule",{"_index":1127,"title":{},"body":{"modules/RbacModule.html":{}}}],["discoveryservice",{"_index":589,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["dividedtointegerby(permissionbitfield",{"_index":836,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["division",{"_index":834,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["documentation",{"_index":1270,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":1183,"title":{},"body":{"classes/RegisterDto.html":{}}}],["don't",{"_index":617,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["double",{"_index":751,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["dp",{"_index":673,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["dp.code",{"_index":644,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["drag",{"_index":1227,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["drop",{"_index":1243,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["drop)'})@requirepermission('roles.update",{"_index":1228,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["dto/create",{"_index":948,"title":{},"body":{"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"controllers/RoleManagementController.html":{}}}],["dto/login.dto",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/register.dto",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":1067,"title":{},"body":{"controllers/PersonController.html":{},"injectables/PersonService.html":{}}}],["dto/verify",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["duration",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["durationms",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["during",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{}}}],["e.g",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["each",{"_index":514,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["email",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["email')@apioperation({summary",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["email'})@isstring()@length(6",{"_index":1261,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["email.dto",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["email.dto.ts",{"_index":1258,"title":{},"body":{"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:10",{"_index":1266,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["email.dto.ts:18",{"_index":1264,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["emailrecord",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailrecord.isverified",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailrecord.person",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailrecord.verificationcode",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailrecord.verificationcodeexpiresat",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["emails",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PersonService.html":{}}}],["enabled",{"_index":939,"title":{},"body":{"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{}}}],["endpoints",{"_index":1411,"title":{},"body":{"index.html":{}}}],["english",{"_index":483,"title":{},"body":{"classes/CreatePersonDto.html":{},"classes/RegisterDto.html":{}}}],["ensure",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["enterprise",{"_index":1364,"title":{},"body":{"index.html":{}}}],["entities/person.entity",{"_index":1071,"title":{},"body":{"controllers/PersonController.html":{}}}],["equals(1",{"_index":838,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["erp",{"_index":1361,"title":{},"body":{"index.html":{},"properties.html":{}}}],["erp.git",{"_index":1386,"title":{},"body":{"index.html":{}}}],["error",{"_index":613,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/RedisHealthIndicator.html":{}}}],["error.code",{"_index":699,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["error.message",{"_index":841,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/RedisHealthIndicator.html":{}}}],["error.stack",{"_index":616,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["errors",{"_index":697,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["exactly",{"_index":1263,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["example",{"_index":576,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{},"index.html":{}}}],["executioncontext",{"_index":524,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":634,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{},"index.html":{}}}],["existingemail",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{}}}],["expired",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["expires_in",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresat",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["expiry",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{}}}],["exports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"overview.html":{}}}],["express",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["extends",{"_index":517,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RedisHealthIndicator.html":{},"classes/UpdatePersonDto.html":{}}}],["extract",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["extractjwt",{"_index":549,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":553,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractrefreshtokenfromcookie",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["extractrefreshtokenfromcookie(req",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["failed",{"_index":615,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/RedisHealthIndicator.html":{}}}],["false",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateRoleDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RegisterDto.html":{}}}],["false})@isarray()@isstring({each",{"_index":509,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["false})@ishexcolor()@isoptional",{"_index":500,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["false})@isoptional()@isstring()@minlength(2",{"_index":1180,"title":{},"body":{"classes/RegisterDto.html":{}}}],["false})@isstring()@isoptional",{"_index":502,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["feature",{"_index":1421,"title":{},"body":{"index.html":{}}}],["feature/name",{"_index":1424,"title":{},"body":{"index.html":{}}}],["features",{"_index":1394,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["financial",{"_index":1400,"title":{},"body":{"index.html":{}}}],["find",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["findall",{"_index":1039,"title":{},"body":{"controllers/PersonController.html":{},"injectables/PersonService.html":{}}}],["findone",{"_index":1040,"title":{},"body":{"controllers/PersonController.html":{},"injectables/PersonService.html":{}}}],["findone(@param('id",{"_index":1080,"title":{},"body":{"controllers/PersonController.html":{}}}],["findone(id",{"_index":1049,"title":{},"body":{"controllers/PersonController.html":{},"injectables/PersonService.html":{}}}],["first",{"_index":726,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["fix",{"_index":627,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["forbiddenexception",{"_index":947,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["forbiddenexception('cannot",{"_index":992,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["format",{"_index":748,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["formatcategoryname",{"_index":583,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["formatcategoryname(str",{"_index":594,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["formatpermissionname",{"_index":584,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["formatpermissionname(str",{"_index":597,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["found",{"_index":639,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{}}}],["full",{"_index":1418,"title":{},"body":{"index.html":{}}}],["function",{"_index":1289,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1351,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens(personid",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["generating",{"_index":1175,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["get(':id",{"_index":1079,"title":{},"body":{"controllers/PersonController.html":{}}}],["get(':id')@requirepermission('people.read')@apioperation({summary",{"_index":1050,"title":{},"body":{"controllers/PersonController.html":{}}}],["get('dashboard",{"_index":856,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["get('roles/:id",{"_index":859,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["get()@apioperation({summary",{"_index":1213,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["get()@requirepermission('people.read')@apioperation({summary",{"_index":1046,"title":{},"body":{"controllers/PersonController.html":{}}}],["getdurationinms",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["getdurationinms(duration",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getnextroleposition",{"_index":900,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["getpermissioncategories",{"_index":901,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["getpermissiondashboard",{"_index":847,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["getpermissionsbycategory",{"_index":585,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["getrefreshtokenexpirydate",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrole",{"_index":848,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["getrole(@param('id",{"_index":891,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["getrole(roleid",{"_index":858,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["getroles",{"_index":902,"title":{},"body":{"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{}}}],["getroles(includepermissions",{"_index":926,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["getrolewithpermissions",{"_index":903,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["getrolewithpermissions(roleid",{"_index":929,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["getting",{"_index":1358,"title":{"index.html":{}},"body":{"index.html":{}}}],["getuserroles",{"_index":904,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["getuserroles(userid",{"_index":931,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["git",{"_index":1384,"title":{},"body":{"index.html":{}}}],["git+https://github.com/bawes/erp.git",{"_index":1443,"title":{},"body":{"properties.html":{}}}],["grant",{"_index":654,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["graph",{"_index":1436,"title":{},"body":{"modules.html":{}}}],["group",{"_index":950,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["guard",{"_index":775,"title":{"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":777,"title":{},"body":{"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"overview.html":{}}}],["guards/permission.guard",{"_index":867,"title":{},"body":{"controllers/PermissionManagementController.html":{},"modules/RbacModule.html":{},"controllers/RoleManagementController.html":{}}}],["guide",{"_index":1376,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":1406,"title":{},"body":{"index.html":{}}}],["handle",{"_index":695,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"index.html":{}}}],["handler",{"_index":744,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["hash",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{}}}],["hashedtoken",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["haspermission",{"_index":813,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["haspermission(personid",{"_index":933,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["health",{"_index":1168,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["health:${key",{"_index":1166,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["healthcheckerror",{"_index":1162,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["healthindicator",{"_index":1154,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["healthindicatorresult",{"_index":1161,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["hello",{"_index":68,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":766,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["here",{"_index":618,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"index.html":{}}}],["hex",{"_index":498,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["host",{"_index":1143,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["hours",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpcode",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://github.com/plugnio/bawes",{"_index":1385,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["hub",{"_index":1419,"title":{},"body":{"index.html":{}}}],["id",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{}}}],["id'})@apiresponse({status",{"_index":1051,"title":{},"body":{"controllers/PersonController.html":{}}}],["identifier",{"_index":1271,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":607,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{}}}],["include",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{}}}],["includepermissions",{"_index":928,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["including",{"_index":1371,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/PrismaService.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/VerifyEmailDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{}}}],["initial",{"_index":506,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["inject",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{}}}],["inject(cache_manager",{"_index":807,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["injectable",{"_index":64,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"injectables/PrismaService.html":{},"injectables/RedisHealthIndicator.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"injectables/PrismaService.html":{},"injectables/RedisHealthIndicator.html":{},"coverage.html":{}}}],["injectables",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"injectables/PrismaService.html":{},"injectables/RedisHealthIndicator.html":{},"overview.html":{}}}],["instance",{"_index":719,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["instance.constructor",{"_index":729,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["instance.constructor.name.includes('controller",{"_index":724,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["instance.constructor.name}.${method",{"_index":749,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["instance[method",{"_index":745,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["instanceof",{"_index":693,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["instances",{"_index":722,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["instead",{"_index":622,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["instructions",{"_index":1379,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1395,"title":{},"body":{"index.html":{}}}],["interface",{"_index":535,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":536,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["interfaces/jwt",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["invalid",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{}}}],["ioredis",{"_index":1335,"title":{},"body":{"dependencies.html":{}}}],["ip",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["ipaddress",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["is_public_key",{"_index":528,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":512,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["iscontroller",{"_index":723,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["isdeleted",{"_index":1021,"title":{},"body":{"classes/Person.html":{},"injectables/PersonService.html":{}}}],["isdeprecated",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["isemail",{"_index":574,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["isglobal",{"_index":1151,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["ishealthy",{"_index":1171,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["ishexcolor",{"_index":513,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isnotempty",{"_index":489,"title":{},"body":{"classes/CreatePersonDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isoptional",{"_index":490,"title":{},"body":{"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"classes/RegisterDto.html":{}}}],["ispasswordvalid",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["isprimary",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["ispublic",{"_index":530,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isrevoked",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":491,"title":{},"body":{"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["issuperadmin",{"_index":819,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["issystem",{"_index":982,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["john",{"_index":1182,"title":{},"body":{"classes/RegisterDto.html":{}}}],["join",{"_index":684,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["jti",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_access_token_expiry",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_refresh_token_expiry",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtauthguard",{"_index":56,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":552,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":278,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["jwtservice",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":184,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":1160,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["know",{"_index":625,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["last",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{}}}],["lastloginat",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"classes/Person.html":{}}}],["lastpermission",{"_index":711,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["lastusedat",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["legend",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"overview.html":{}}}],["length",{"_index":1267,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["length(6",{"_index":1268,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["letter",{"_index":1193,"title":{},"body":{"classes/RegisterDto.html":{}}}],["level",{"_index":725,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["license",{"_index":1429,"title":{},"body":{"index.html":{},"properties.html":{}}}],["literal",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{}}}],["log",{"_index":623,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["logged",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["logger",{"_index":581,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["logger(permissiondiscoveryservice.name",{"_index":602,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["logger(permissionguard.name",{"_index":803,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["login",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login'})@apiresponse({status",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":81,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto.password",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout'})@apiresponse({status",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@body",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(refreshtokendto",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["long",{"_index":572,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["long'})@matches(/^(?=.*[a",{"_index":1185,"title":{},"body":{"classes/RegisterDto.html":{}}}],["longer",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["lowercase",{"_index":1194,"title":{},"body":{"classes/RegisterDto.html":{}}}],["lt",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["make",{"_index":1425,"title":{},"body":{"index.html":{}}}],["management",{"_index":767,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"controllers/RoleManagementController.html":{},"index.html":{}}}],["management.controller",{"_index":1131,"title":{},"body":{"modules/RbacModule.html":{}}}],["management.controller.ts",{"_index":844,"title":{},"body":{"controllers/PermissionManagementController.html":{},"controllers/RoleManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:22",{"_index":857,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["management.controller.ts:27",{"_index":1215,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["management.controller.ts:34",{"_index":1212,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["management.controller.ts:41",{"_index":1223,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["management.controller.ts:43",{"_index":852,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["management.controller.ts:50",{"_index":855,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["management.controller.ts:59",{"_index":1229,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["management.controller.ts:63",{"_index":863,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["management.controller.ts:69",{"_index":1209,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["management.controller.ts:74",{"_index":860,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["management.controller.ts:79",{"_index":1218,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["management.service",{"_index":784,"title":{},"body":{"guards/PermissionGuard.html":{},"controllers/PermissionManagementController.html":{},"modules/RbacModule.html":{},"controllers/RoleManagementController.html":{}}}],["management.service.ts",{"_index":893,"title":{},"body":{"injectables/PermissionManagementService.html":{},"coverage.html":{}}}],["management.service.ts:110",{"_index":942,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:127",{"_index":930,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:138",{"_index":913,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:14",{"_index":908,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:166",{"_index":935,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:185",{"_index":922,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:20",{"_index":924,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:215",{"_index":941,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:262",{"_index":945,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:285",{"_index":910,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:307",{"_index":937,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:323",{"_index":923,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:330",{"_index":915,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:340",{"_index":917,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:344",{"_index":932,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:43",{"_index":925,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:63",{"_index":920,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:78",{"_index":918,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["management.service.ts:97",{"_index":927,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["manager",{"_index":800,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"dependencies.html":{}}}],["manual",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["map((word",{"_index":763,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["mark",{"_index":669,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["matches",{"_index":1198,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^(?=.*[a",{"_index":1199,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.random",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["max",{"_index":1149,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["maxrole",{"_index":1010,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["maxrole?.sortorder",{"_index":1012,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["message",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["metadata",{"_index":1342,"title":{},"body":{"dependencies.html":{}}}],["metadatascanner",{"_index":590,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["method",{"_index":743,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/PrismaService.html":{},"injectables/RedisHealthIndicator.html":{},"controllers/RoleManagementController.html":{}}}],["milliseconds",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["minlength",{"_index":575,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(2",{"_index":1200,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":577,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["minutes",{"_index":806,"title":{},"body":{"guards/PermissionGuard-1.html":{},"modules/RbacModule.html":{}}}],["miscellaneous",{"_index":1350,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":957,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["modify",{"_index":993,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["module",{"_index":31,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"overview.html":{}}}],["modules",{"_index":33,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"modules.html":{},"overview.html":{}}}],["modulo",{"_index":833,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["modulo(2",{"_index":837,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["more",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["ms(duration",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["multi",{"_index":1397,"title":{},"body":{"index.html":{}}}],["name",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["namear",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"injectables/JwtStrategy.html":{},"classes/Person.html":{},"classes/RegisterDto.html":{}}}],["nameen",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"injectables/JwtStrategy.html":{},"classes/Person.html":{},"classes/RegisterDto.html":{}}}],["need",{"_index":626,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["nestjs",{"_index":1368,"title":{},"body":{"index.html":{}}}],["nestjs/cache",{"_index":802,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"controllers/RoleManagementController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/RedisCacheModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"modules/RbacModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1313,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":1314,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"classes/LoginDto.html":{},"controllers/PersonController.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1163,"title":{},"body":{"injectables/RedisHealthIndicator.html":{},"dependencies.html":{}}}],["new",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"controllers/RoleManagementController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newpermissions",{"_index":640,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["newpermissions.length",{"_index":646,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["newpermissions.map((p",{"_index":649,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["newposition",{"_index":944,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["next",{"_index":710,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["nextbitfield",{"_index":715,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["nextbitfield.mul(2",{"_index":739,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["none",{"_index":681,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["notfoundexception",{"_index":946,"title":{},"body":{"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{}}}],["notfoundexception('permission",{"_index":995,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["notfoundexception('role",{"_index":990,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["notfoundexception(`person",{"_index":1107,"title":{},"body":{"injectables/PersonService.html":{}}}],["now",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["null",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{}}}],["object",{"_index":558,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["object.getprototypeof(instance",{"_index":741,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["object.values(categories",{"_index":953,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["obsoletepermissions",{"_index":671,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["obsoletepermissions.length",{"_index":675,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["obsoletepermissions.map((p",{"_index":677,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["old",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["omittype",{"_index":1256,"title":{},"body":{"classes/UpdatePersonDto.html":{}}}],["omittype(createpersondto",{"_index":1255,"title":{},"body":{"classes/UpdatePersonDto.html":{}}}],["one",{"_index":1191,"title":{},"body":{"classes/RegisterDto.html":{}}}],["onmoduledestroy",{"_index":1116,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":586,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PrismaService.html":{}}}],["open",{"_index":1388,"title":{},"body":{"index.html":{}}}],["operations",{"_index":829,"title":{},"body":{"guards/PermissionGuard-1.html":{},"index.html":{}}}],["optional",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{}}}],["orderby",{"_index":713,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["origin",{"_index":1427,"title":{},"body":{"index.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"overview.html":{}}}],["overview",{"_index":1362,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p.category",{"_index":690,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["p.code",{"_index":659,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["p.code).join",{"_index":650,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["p.id",{"_index":665,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["p2002",{"_index":701,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["package",{"_index":1307,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":865,"title":{},"body":{"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["param('id",{"_index":887,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["param('roleid",{"_index":1238,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["param('userid",{"_index":1248,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["parameters",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{},"controllers/RoleManagementController.html":{}}}],["partialtype",{"_index":1254,"title":{},"body":{"classes/UpdatePersonDto.html":{}}}],["passport",{"_index":551,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":548,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":543,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/LoginDto.html":{},"modules/RedisCacheModule.html":{},"classes/RegisterDto.html":{}}}],["password'})@isstring()@minlength(8",{"_index":570,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["password123",{"_index":569,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["passwordhash",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/Person.html":{},"classes/UpdatePersonDto.html":{}}}],["passwordresettoken",{"_index":1022,"title":{},"body":{"classes/Person.html":{}}}],["passwordresettokenexpiresat",{"_index":1023,"title":{},"body":{"classes/Person.html":{}}}],["patch",{"_index":1063,"title":{},"body":{"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["patch(':id",{"_index":1082,"title":{},"body":{"controllers/PersonController.html":{}}}],["patch(':id')@requirepermission('people.update')@apioperation({summary",{"_index":1061,"title":{},"body":{"controllers/PersonController.html":{}}}],["patch(':roleid/permissions",{"_index":1236,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["patch(':roleid/permissions')@apioperation({summary",{"_index":1220,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["patch(':roleid/position",{"_index":1242,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["patch(':roleid/position')@apioperation({summary",{"_index":1225,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["payload",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.interface.ts",{"_index":538,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.sub",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["pending",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["people",{"_index":1038,"title":{},"body":{"controllers/PersonController.html":{}}}],["people'})@apiresponse({status",{"_index":1047,"title":{},"body":{"controllers/PersonController.html":{}}}],["perm",{"_index":975,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["permission",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateRoleDto.html":{},"interfaces/JwtPayload.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"miscellaneous/variables.html":{}}}],["permission.category",{"_index":951,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["permission.decorator",{"_index":605,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["permission.decorator.ts",{"_index":1293,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["permission.id",{"_index":988,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["permission.isdeprecated",{"_index":818,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["permission.split",{"_index":747,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["permission.ts",{"_index":1298,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["permission_key",{"_index":603,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionbitfield",{"_index":830,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["permissionbits",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{}}}],["permissionbits.tostring",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["permissioncode",{"_index":934,"title":{},"body":{"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{}}}],["permissiondiscoveryservice",{"_index":578,"title":{"injectables/PermissionDiscoveryService.html":{}},"body":{"injectables/PermissionDiscoveryService.html":{},"modules/RbacModule.html":{},"coverage.html":{},"overview.html":{}}}],["permissionguard",{"_index":776,"title":{"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{}},"body":{"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"modules/RbacModule.html":{},"controllers/RoleManagementController.html":{},"coverage.html":{},"overview.html":{}}}],["permissionid",{"_index":664,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["permissionids",{"_index":888,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["permissionids.map((permissionid",{"_index":968,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["permissionmanagementcontroller",{"_index":842,"title":{"controllers/PermissionManagementController.html":{}},"body":{"controllers/PermissionManagementController.html":{},"modules/RbacModule.html":{},"coverage.html":{}}}],["permissionmanagementservice",{"_index":780,"title":{"injectables/PermissionManagementService.html":{}},"body":{"guards/PermissionGuard.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"modules/RbacModule.html":{},"controllers/RoleManagementController.html":{},"coverage.html":{},"overview.html":{}}}],["permissions",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateRoleDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{},"miscellaneous/variables.html":{}}}],["permissions'})@requirepermission('roles.read",{"_index":1214,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["permissions.map((permission",{"_index":986,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["permissions.push",{"_index":734,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["permissions.reduce",{"_index":771,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["permissions.some((p",{"_index":733,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["permissions.sort((a",{"_index":755,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["permissions.ts",{"_index":1300,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["permissions:${personid",{"_index":812,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["permissions:${userid",{"_index":1018,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["permissionservice",{"_index":779,"title":{},"body":{"guards/PermissionGuard.html":{},"controllers/PermissionManagementController.html":{},"controllers/RoleManagementController.html":{}}}],["person",{"_index":296,"title":{"classes/Person.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"coverage.html":{}}}],["person's",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["person'})@apiresponse({status",{"_index":1044,"title":{},"body":{"controllers/PersonController.html":{}}}],["person'})@isoptional()@isstring",{"_index":481,"title":{},"body":{"classes/CreatePersonDto.html":{}}}],["person.accountstatus",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["person.controller",{"_index":1095,"title":{},"body":{"modules/PersonModule.html":{}}}],["person.dto",{"_index":1066,"title":{},"body":{"controllers/PersonController.html":{},"injectables/PersonService.html":{},"classes/UpdatePersonDto.html":{}}}],["person.dto.ts",{"_index":473,"title":{},"body":{"classes/CreatePersonDto.html":{},"classes/UpdatePersonDto.html":{},"coverage.html":{}}}],["person.dto.ts:13",{"_index":482,"title":{},"body":{"classes/CreatePersonDto.html":{}}}],["person.dto.ts:18",{"_index":486,"title":{},"body":{"classes/CreatePersonDto.html":{}}}],["person.dto.ts:23",{"_index":478,"title":{},"body":{"classes/CreatePersonDto.html":{}}}],["person.dto.ts:8",{"_index":484,"title":{},"body":{"classes/CreatePersonDto.html":{}}}],["person.emails[0]?.email",{"_index":560,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["person.id",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["person.namear",{"_index":562,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["person.nameen",{"_index":561,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["person.passwordhash",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["person.roles.reduce((acc",{"_index":826,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["person.roles.some",{"_index":820,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["person.service",{"_index":1065,"title":{},"body":{"controllers/PersonController.html":{},"modules/PersonModule.html":{}}}],["person/person.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["personcontroller",{"_index":1036,"title":{"controllers/PersonController.html":{}},"body":{"controllers/PersonController.html":{},"modules/PersonModule.html":{},"coverage.html":{}}}],["personid",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["personid_roleid",{"_index":1009,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["personmodule",{"_index":44,"title":{"modules/PersonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PersonModule.html":{},"modules.html":{},"overview.html":{}}}],["personservice",{"_index":1064,"title":{"injectables/PersonService.html":{}},"body":{"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"coverage.html":{},"overview.html":{}}}],["personwithroles",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["personwithroles.emails[0]?.email",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["personwithroles.roles.reduce((acc",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["person})@apiresponse({status",{"_index":1052,"title":{},"body":{"controllers/PersonController.html":{}}}],["phones",{"_index":1106,"title":{},"body":{"injectables/PersonService.html":{}}}],["planning",{"_index":1366,"title":{},"body":{"index.html":{}}}],["please",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["port",{"_index":1145,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["position",{"_index":1226,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["post",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["post('categories",{"_index":851,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["post('login",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('permissions",{"_index":854,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["post('refresh",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('users/:userid/roles",{"_index":1246,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["post('users/:userid/roles')@apioperation({summary",{"_index":1207,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["post('verify",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":1210,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["post()@requirepermission('people.create')@apioperation({summary",{"_index":1043,"title":{},"body":{"controllers/PersonController.html":{}}}],["power",{"_index":752,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["pr",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{}}}],["pr.role.name",{"_index":821,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["pr.role.permissions.reduce",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{}}}],["practices",{"_index":1408,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["prevent",{"_index":619,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["primary",{"_index":539,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["prisma",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prisma.email.create",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma.permissioncreateinput",{"_index":707,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["prisma.person.create",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":694,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["prisma.service",{"_index":1113,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":606,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/RbacModule.html":{}}}],["prisma/prisma.service",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{}}}],["prismaclient",{"_index":1115,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismamodule",{"_index":45,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":222,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/RedisHealthIndicator.html":{}}}],["process",{"_index":721,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["process.env.jwt_access_token_expiry",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_secret",{"_index":555,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["promise",{"_index":593,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/RedisHealthIndicator.html":{}}}],["promise.all",{"_index":790,"title":{},"body":{"guards/PermissionGuard.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["promptedcore",{"_index":1393,"title":{},"body":{"index.html":{}}}],["prompts",{"_index":1339,"title":{},"body":{"dependencies.html":{}}}],["properties",{"_index":474,"title":{"properties.html":{}},"body":{"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"classes/Person.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{},"properties.html":{}}}],["proprietary",{"_index":1430,"title":{},"body":{"index.html":{}}}],["prototype",{"_index":740,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["provide",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["provided",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"overview.html":{}}}],["public",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register')@apioperation({summary",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('verify",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["pull",{"_index":1428,"title":{},"body":{"index.html":{}}}],["push",{"_index":1426,"title":{},"body":{"index.html":{}}}],["put",{"_index":864,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["put('roles/:id/permissions",{"_index":862,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["quick",{"_index":1380,"title":{},"body":{"index.html":{}}}],["r.issystem).length",{"_index":884,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["rbac/decorators/require",{"_index":1070,"title":{},"body":{"controllers/PersonController.html":{}}}],["rbac/rbac.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/PersonModule.html":{}}}],["rbac/services/permission",{"_index":783,"title":{},"body":{"guards/PermissionGuard.html":{}}}],["rbacmodule",{"_index":46,"title":{"modules/RbacModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PersonModule.html":{},"modules/RbacModule.html":{},"modules.html":{},"overview.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{}}}],["real",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["reason",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["record",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["redis",{"_index":1139,"title":{},"body":{"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"dependencies.html":{}}}],["rediscachemodule",{"_index":1135,"title":{"modules/RedisCacheModule.html":{}},"body":{"modules/RedisCacheModule.html":{},"modules.html":{}}}],["redisclientoptions",{"_index":1141,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["redishealthindicator",{"_index":1152,"title":{"injectables/RedisHealthIndicator.html":{}},"body":{"injectables/RedisHealthIndicator.html":{},"coverage.html":{}}}],["redisstore",{"_index":1138,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["reflect",{"_index":1341,"title":{},"body":{"dependencies.html":{}}}],["reflect.getmetadata",{"_index":728,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["reflect.getmetadata(permission_key",{"_index":746,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["reflector",{"_index":521,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{}}}],["refresh",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refresh(@body",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(refreshtokendto",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh_token",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshed",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken(req",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":100,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenpayload",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["register",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(data",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(registerdto",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto",{"_index":115,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registered",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered'})@apiresponse({status",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":1041,"title":{},"body":{"controllers/PersonController.html":{},"injectables/PersonService.html":{},"controllers/RoleManagementController.html":{}}}],["remove(@param('id",{"_index":1088,"title":{},"body":{"controllers/PersonController.html":{}}}],["remove(id",{"_index":1055,"title":{},"body":{"controllers/PersonController.html":{},"injectables/PersonService.html":{}}}],["removerole",{"_index":1203,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["removerole(userid",{"_index":1216,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["removerolefromuser",{"_index":905,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["removerolefromuser(userid",{"_index":936,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["reopen",{"_index":1391,"title":{},"body":{"index.html":{}}}],["reporting",{"_index":1401,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1383,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["req.cookies?.refresh_token",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.headers['user",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.ip",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.socket.remoteaddress",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["request",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":788,"title":{},"body":{"guards/PermissionGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user?.id",{"_index":809,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["required",{"_index":499,"title":{},"body":{"classes/CreateRoleDto.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{}}}],["requiredpermission",{"_index":808,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["requiredpermissions",{"_index":785,"title":{},"body":{"guards/PermissionGuard.html":{}}}],["requiredpermissions.map((permission",{"_index":791,"title":{},"body":{"guards/PermissionGuard.html":{}}}],["requirepermission",{"_index":868,"title":{},"body":{"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requirepermission('people.create",{"_index":1074,"title":{},"body":{"controllers/PersonController.html":{}}}],["requirepermission('people.delete",{"_index":1087,"title":{},"body":{"controllers/PersonController.html":{}}}],["requirepermission('people.read",{"_index":1077,"title":{},"body":{"controllers/PersonController.html":{}}}],["requirepermission('people.update",{"_index":1083,"title":{},"body":{"controllers/PersonController.html":{}}}],["requirepermission('permissions.manage",{"_index":872,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["requirepermission('roles.assign",{"_index":1247,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["requirepermission('roles.create",{"_index":1233,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["requirepermission('roles.read",{"_index":1232,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["requirepermission('roles.update",{"_index":1237,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["requirepermissions",{"_index":1283,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["reserved",{"_index":1432,"title":{},"body":{"index.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"overview.html":{}}}],["resource",{"_index":1365,"title":{},"body":{"index.html":{}}}],["result",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{}}}],["result.person.id",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{},"controllers/RoleManagementController.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/PrismaService.html":{},"injectables/RedisHealthIndicator.html":{},"controllers/RoleManagementController.html":{}}}],["revocation",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["revokeallusertokens",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["revokeallusertokens(personid",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["revoked",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["revokedreason",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["revokerefreshtoken",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["revokerefreshtoken(refreshtoken",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["revoketokensbydevice",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["revoketokensbydevice(personid",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["rights",{"_index":1431,"title":{},"body":{"index.html":{}}}],["role",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateRoleDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"controllers/RoleManagementController.html":{}}}],["role'})@isstring",{"_index":504,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role'})@requirepermission('roles.create",{"_index":1211,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["role'})@requirepermission('roles.update",{"_index":1222,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["role.dto",{"_index":949,"title":{},"body":{"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{}}}],["role.dto.ts",{"_index":496,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:12",{"_index":503,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:17",{"_index":501,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:26",{"_index":511,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:7",{"_index":505,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.id",{"_index":987,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["role.issystem",{"_index":991,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["role.role.permissions.reduce",{"_index":974,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["roleacc",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["roleacc.add(new",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionManagementService.html":{}}}],["roleacc.plus(new",{"_index":827,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["rolebitfield",{"_index":973,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["rolebits",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{}}}],["roleid",{"_index":662,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{}}}],["rolemanagementcontroller",{"_index":1126,"title":{"controllers/RoleManagementController.html":{}},"body":{"modules/RbacModule.html":{},"controllers/RoleManagementController.html":{},"coverage.html":{}}}],["roles",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"controllers/RoleManagementController.html":{}}}],["roles.filter((r",{"_index":883,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["roles.length",{"_index":881,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["roles.map((role",{"_index":1001,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["rp",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{}}}],["rp.permission.isdeprecated",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["rxjs",{"_index":1344,"title":{},"body":{"dependencies.html":{}}}],["sdk",{"_index":1410,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":554,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":1417,"title":{},"body":{"index.html":{}}}],["see",{"_index":1375,"title":{},"body":{"index.html":{}}}],["select",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{}}}],["send",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["sent",{"_index":1260,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["serialized",{"_index":541,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["services/permission",{"_index":869,"title":{},"body":{"controllers/PermissionManagementController.html":{},"modules/RbacModule.html":{},"controllers/RoleManagementController.html":{}}}],["set",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["set(codepermissions.map((p",{"_index":689,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["setmetadata('permissions",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(permission_key",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1378,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["simulate",{"_index":835,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["skip",{"_index":750,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["skipduplicates",{"_index":652,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["soft",{"_index":1057,"title":{},"body":{"controllers/PersonController.html":{}}}],["sort",{"_index":754,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["sortorder",{"_index":709,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"modules/PersonModule.html":{},"injectables/PersonService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/UpdatePersonDto.html":{},"classes/VerifyEmailDto.html":{}}}],["special",{"_index":1195,"title":{},"body":{"classes/RegisterDto.html":{}}}],["specific",{"_index":696,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["split('_",{"_index":762,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["src/.../add",{"_index":1354,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../audit",{"_index":1355,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../create",{"_index":1357,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../current",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../list",{"_index":1356,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1352,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permissions.decorator.ts",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../repl.ts",{"_index":1353,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../require",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":66,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:42",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:52",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:60",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:69",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:142",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:258",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:336",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:354",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:370",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:388",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:410",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:50",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/current",{"_index":1277,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/permissions.decorator.ts",{"_index":1282,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":1284,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":563,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":568,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:18",{"_index":573,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/refresh",{"_index":1173,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":1178,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:16",{"_index":1179,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:28",{"_index":1197,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:38",{"_index":1184,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:48",{"_index":1181,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/verify",{"_index":1257,"title":{},"body":{"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":515,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/permission.guard.ts",{"_index":778,"title":{},"body":{"guards/PermissionGuard.html":{},"coverage.html":{}}}],["src/auth/guards/permission.guard.ts:12",{"_index":782,"title":{},"body":{"guards/PermissionGuard.html":{}}}],["src/auth/guards/permission.guard.ts:6",{"_index":781,"title":{},"body":{"guards/PermissionGuard.html":{}}}],["src/auth/interfaces/jwt",{"_index":537,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":542,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:15",{"_index":547,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":545,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/cache/redis",{"_index":1136,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["src/health/redis.health.ts",{"_index":1153,"title":{},"body":{"injectables/RedisHealthIndicator.html":{},"coverage.html":{}}}],["src/health/redis.health.ts:12",{"_index":1157,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["src/health/redis.health.ts:17",{"_index":1159,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["src/main.ts",{"_index":1288,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/person/dto/create",{"_index":472,"title":{},"body":{"classes/CreatePersonDto.html":{},"coverage.html":{}}}],["src/person/dto/update",{"_index":1253,"title":{},"body":{"classes/UpdatePersonDto.html":{},"coverage.html":{}}}],["src/person/entities/person.entity.ts",{"_index":1019,"title":{},"body":{"classes/Person.html":{},"coverage.html":{}}}],["src/person/entities/person.entity.ts:10",{"_index":1033,"title":{},"body":{"classes/Person.html":{}}}],["src/person/entities/person.entity.ts:11",{"_index":1034,"title":{},"body":{"classes/Person.html":{}}}],["src/person/entities/person.entity.ts:12",{"_index":1028,"title":{},"body":{"classes/Person.html":{}}}],["src/person/entities/person.entity.ts:2",{"_index":1027,"title":{},"body":{"classes/Person.html":{}}}],["src/person/entities/person.entity.ts:3",{"_index":1026,"title":{},"body":{"classes/Person.html":{}}}],["src/person/entities/person.entity.ts:4",{"_index":1035,"title":{},"body":{"classes/Person.html":{}}}],["src/person/entities/person.entity.ts:5",{"_index":1031,"title":{},"body":{"classes/Person.html":{}}}],["src/person/entities/person.entity.ts:6",{"_index":1030,"title":{},"body":{"classes/Person.html":{}}}],["src/person/entities/person.entity.ts:7",{"_index":1032,"title":{},"body":{"classes/Person.html":{}}}],["src/person/entities/person.entity.ts:8",{"_index":1029,"title":{},"body":{"classes/Person.html":{}}}],["src/person/entities/person.entity.ts:9",{"_index":1025,"title":{},"body":{"classes/Person.html":{}}}],["src/person/person.controller.ts",{"_index":1037,"title":{},"body":{"controllers/PersonController.html":{},"coverage.html":{}}}],["src/person/person.controller.ts:36",{"_index":1045,"title":{},"body":{"controllers/PersonController.html":{}}}],["src/person/person.controller.ts:44",{"_index":1048,"title":{},"body":{"controllers/PersonController.html":{}}}],["src/person/person.controller.ts:53",{"_index":1054,"title":{},"body":{"controllers/PersonController.html":{}}}],["src/person/person.controller.ts:62",{"_index":1062,"title":{},"body":{"controllers/PersonController.html":{}}}],["src/person/person.controller.ts:71",{"_index":1058,"title":{},"body":{"controllers/PersonController.html":{}}}],["src/person/person.module.ts",{"_index":1094,"title":{},"body":{"modules/PersonModule.html":{}}}],["src/person/person.service.ts",{"_index":1096,"title":{},"body":{"injectables/PersonService.html":{},"coverage.html":{}}}],["src/person/person.service.ts:10",{"_index":1098,"title":{},"body":{"injectables/PersonService.html":{}}}],["src/person/person.service.ts:16",{"_index":1099,"title":{},"body":{"injectables/PersonService.html":{}}}],["src/person/person.service.ts:24",{"_index":1100,"title":{},"body":{"injectables/PersonService.html":{}}}],["src/person/person.service.ts:48",{"_index":1102,"title":{},"body":{"injectables/PersonService.html":{}}}],["src/person/person.service.ts:57",{"_index":1101,"title":{},"body":{"injectables/PersonService.html":{}}}],["src/person/person.service.ts:7",{"_index":1097,"title":{},"body":{"injectables/PersonService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":1112,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":1114,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:13",{"_index":1117,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:9",{"_index":1118,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/rbac/controllers/permission",{"_index":843,"title":{},"body":{"controllers/PermissionManagementController.html":{},"coverage.html":{}}}],["src/rbac/controllers/role",{"_index":1201,"title":{},"body":{"controllers/RoleManagementController.html":{},"coverage.html":{}}}],["src/rbac/decorators/require",{"_index":1292,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/rbac/dto/create",{"_index":495,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/rbac/guards/permission.guard.ts",{"_index":794,"title":{},"body":{"guards/PermissionGuard-1.html":{},"coverage.html":{}}}],["src/rbac/guards/permission.guard.ts:19",{"_index":798,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["src/rbac/guards/permission.guard.ts:27",{"_index":799,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["src/rbac/rbac.module.ts",{"_index":1125,"title":{},"body":{"modules/RbacModule.html":{}}}],["src/rbac/services/permission",{"_index":579,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{},"coverage.html":{}}}],["src/repl.ts",{"_index":1296,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/scripts/add",{"_index":1297,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/scripts/audit",{"_index":1299,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/scripts/create",{"_index":1301,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/scripts/list",{"_index":1304,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standards",{"_index":1404,"title":{},"body":{"index.html":{}}}],["start",{"_index":1381,"title":{},"body":{"index.html":{}}}],["started",{"_index":1359,"title":{"index.html":{}},"body":{"index.html":{}}}],["starting",{"_index":621,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["statements",{"_index":1272,"title":{},"body":{"coverage.html":{}}}],["stats",{"_index":875,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["status",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePersonDto.html":{},"controllers/PersonController.html":{}}}],["store",{"_index":1140,"title":{},"body":{"modules/RedisCacheModule.html":{},"dependencies.html":{}}}],["str",{"_index":596,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["strategies/jwt.strategy",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":550,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/VerifyEmailDto.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":956,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["structure",{"_index":1402,"title":{},"body":{"index.html":{}}}],["sub",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["substring(2",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["successful",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["successful'})@apiresponse({status",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PermissionDiscoveryService.html":{}}}],["successfully'})@apiresponse({status",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PermissionDiscoveryService.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["super",{"_index":529,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionGuard-1.html":{},"injectables/RedisHealthIndicator.html":{}}}],["super.canactivate(context",{"_index":534,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super_admin",{"_index":653,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["superadmin",{"_index":656,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["superadmin.id",{"_index":663,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["support",{"_index":1399,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1434,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1346,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":698,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["sync",{"_index":686,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["syncpermissions",{"_index":587,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["system",{"_index":994,"title":{},"body":{"injectables/PermissionManagementService.html":{},"index.html":{}}}],["systemroles",{"_index":882,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["table",{"_index":1306,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1305,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":556,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["temporarily",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["temporary",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["testing",{"_index":1407,"title":{},"body":{"index.html":{}}}],["testkey",{"_index":1165,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["thirtydaysago",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.$connect",{"_index":1119,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1120,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtoken(req",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.revokerefreshtoken(refreshtokendto.refresh_token",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatelogin",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyemail",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.cache_ttl",{"_index":823,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["this.cachemanager.del(`user",{"_index":1017,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.cachemanager.del(testkey",{"_index":1170,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["this.cachemanager.get",{"_index":814,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["this.cachemanager.get(testkey",{"_index":1169,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["this.cachemanager.set",{"_index":822,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["this.cachemanager.set(testkey",{"_index":1167,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["this.calculateeffectivepermissions(personid",{"_index":979,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.clearpermissioncache(roleid",{"_index":999,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.clearuserpermissioncache(ur.personid",{"_index":1016,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.clearuserpermissioncache(userid",{"_index":1006,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.configservice.get",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_access_token_expiry",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.discoverpermissions",{"_index":629,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.discoveryservice.getcontrollers",{"_index":708,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.extractrefreshtokenfromcookie(req",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findone(id",{"_index":1108,"title":{},"body":{"injectables/PersonService.html":{}}}],["this.formatcategoryname(category",{"_index":736,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.formatpermissionname(action",{"_index":735,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.generatetokens(person.id",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getdurationinms",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getdurationinms(duration",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getnextroleposition",{"_index":983,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.getpermissioncategories",{"_index":954,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.getrefreshtokenexpirydate",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getroles(true",{"_index":955,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.getrolewithpermissions(role.id",{"_index":989,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.getrolewithpermissions(roleid",{"_index":969,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.getstatus(key",{"_index":1172,"title":{},"body":{"injectables/RedisHealthIndicator.html":{}}}],["this.getuserroles(userid",{"_index":1007,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.jwtservice.sign(accesstokenpayload",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(refreshtokenpayload",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(refreshtoken",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(refreshtoken",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":702,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["this.logger.error('failed",{"_index":692,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.logger.error('permission",{"_index":614,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.logger.log",{"_index":630,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.logger.log('all",{"_index":667,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.logger.log('granted",{"_index":666,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.logger.log('permission",{"_index":611,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.logger.log('starting",{"_index":608,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.logger.log(`permission",{"_index":685,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.logger.warn",{"_index":676,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{}}}],["this.metadatascanner.scanfromprototype",{"_index":742,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["this.permissionservice.assignroletouser(userid",{"_index":1249,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["this.permissionservice.createpermission(data",{"_index":886,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["this.permissionservice.createpermissioncategory(data",{"_index":885,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["this.permissionservice.createrole(data",{"_index":1235,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["this.permissionservice.getpermissioncategories",{"_index":873,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["this.permissionservice.getroles(true",{"_index":874,"title":{},"body":{"controllers/PermissionManagementController.html":{},"controllers/RoleManagementController.html":{}}}],["this.permissionservice.getrolewithpermissions(roleid",{"_index":892,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["this.permissionservice.haspermission(user.id",{"_index":792,"title":{},"body":{"guards/PermissionGuard.html":{}}}],["this.permissionservice.removerolefromuser(userid",{"_index":1252,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["this.permissionservice.togglerolepermission",{"_index":1239,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["this.permissionservice.updaterolepermissions",{"_index":889,"title":{},"body":{"controllers/PermissionManagementController.html":{}}}],["this.permissionservice.updateroleposition(roleid",{"_index":1244,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["this.personservice.create(createpersondto",{"_index":1076,"title":{},"body":{"controllers/PersonController.html":{}}}],["this.personservice.findall",{"_index":1078,"title":{},"body":{"controllers/PersonController.html":{}}}],["this.personservice.findone(id",{"_index":1081,"title":{},"body":{"controllers/PersonController.html":{}}}],["this.personservice.remove(id",{"_index":1089,"title":{},"body":{"controllers/PersonController.html":{}}}],["this.personservice.update(id",{"_index":1085,"title":{},"body":{"controllers/PersonController.html":{}}}],["this.prisma.$transaction(async",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{}}}],["this.prisma.$transaction(updates",{"_index":1003,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.email.findunique",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.permission.create",{"_index":964,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.permission.findfirst",{"_index":712,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["this.prisma.permission.findmany",{"_index":769,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{}}}],["this.prisma.permission.findunique",{"_index":817,"title":{},"body":{"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["this.prisma.person.create",{"_index":1103,"title":{},"body":{"injectables/PersonService.html":{}}}],["this.prisma.person.findfirst",{"_index":1105,"title":{},"body":{"injectables/PersonService.html":{}}}],["this.prisma.person.findmany",{"_index":1104,"title":{},"body":{"injectables/PersonService.html":{}}}],["this.prisma.person.findunique",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["this.prisma.person.update",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PersonService.html":{}}}],["this.prisma.personrole.create",{"_index":1004,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.personrole.delete",{"_index":1008,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.personrole.findmany",{"_index":1014,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.refreshtoken.create",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.refreshtoken.deletemany",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.refreshtoken.update",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.refreshtoken.updatemany",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.refreshtoken.upsert",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.role.create",{"_index":981,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.role.findfirst",{"_index":1011,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.role.findmany",{"_index":965,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.role.findunique",{"_index":970,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.role.update",{"_index":1002,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.rolepermission.create",{"_index":996,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.rolepermission.createmany",{"_index":967,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.prisma.rolepermission.deletemany",{"_index":966,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["this.reflector.get",{"_index":786,"title":{},"body":{"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":531,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.syncpermissions",{"_index":610,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["through",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"injectables/RedisHealthIndicator.html":{}}}],["todo",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["toggle",{"_index":1221,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["togglepermissions",{"_index":1204,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["togglepermissions(roleid",{"_index":1219,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["togglerolepermission",{"_index":906,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["togglerolepermission(roleid",{"_index":938,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["token",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["token'})@apiresponse({status",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["token'})@isstring()@isnotempty({message",{"_index":1176,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.dto",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto.ts",{"_index":1174,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:10",{"_index":1177,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token_type",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokenid",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["tostring(36",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":679,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["totalpermissions",{"_index":876,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["totalroles",{"_index":880,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["touppercase",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["transaction",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":1331,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"modules/RedisCacheModule.html":{},"miscellaneous/variables.html":{}}}],["true})@isoptional",{"_index":510,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["try",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard-1.html":{},"injectables/RedisHealthIndicator.html":{}}}],["ttl",{"_index":1134,"title":{},"body":{"modules/RbacModule.html":{},"modules/RedisCacheModule.html":{}}}],["tx",{"_index":633,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["tx.permission.createmany",{"_index":651,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["tx.permission.findmany",{"_index":637,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["tx.permission.updatemany",{"_index":678,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["tx.role.findunique",{"_index":657,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["tx.rolepermission.createmany",{"_index":660,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["type",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PermissionDiscoveryService.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"classes/Person.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisHealthIndicator.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":1319,"title":{},"body":{"dependencies.html":{}}}],["types/cache",{"_index":1321,"title":{},"body":{"dependencies.html":{}}}],["types/ms",{"_index":1323,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1325,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":768,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{},"dependencies.html":{}}}],["unauthorizedexception",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionGuard-1.html":{}}}],["unauthorizedexception('account",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('insufficient",{"_index":840,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["unauthorizedexception('invalid",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('no",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('password",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{}}}],["undefined",{"_index":816,"title":{},"body":{"guards/PermissionGuard-1.html":{},"controllers/PersonController.html":{}}}],["unique",{"_index":703,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["unknown",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionDiscoveryService.html":{},"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{},"injectables/PersonService.html":{},"controllers/RoleManagementController.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1442,"title":{},"body":{"properties.html":{}}}],["until",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["unverified",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["up",{"_index":668,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["update",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PersonController.html":{},"injectables/PersonService.html":{},"controllers/RoleManagementController.html":{}}}],["update(@param('id",{"_index":1084,"title":{},"body":{"controllers/PersonController.html":{}}}],["update(id",{"_index":1059,"title":{},"body":{"controllers/PersonController.html":{},"injectables/PersonService.html":{}}}],["updated",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatedat",{"_index":1024,"title":{},"body":{"classes/Person.html":{}}}],["updatepersondto",{"_index":1060,"title":{"classes/UpdatePersonDto.html":{}},"body":{"controllers/PersonController.html":{},"injectables/PersonService.html":{},"classes/UpdatePersonDto.html":{},"coverage.html":{}}}],["updateposition",{"_index":1205,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["updateposition(roleid",{"_index":1224,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["updaterolepermissions",{"_index":849,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["updaterolepermissions(roleid",{"_index":861,"title":{},"body":{"controllers/PermissionManagementController.html":{},"injectables/PermissionManagementService.html":{}}}],["updateroleposition",{"_index":907,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["updateroleposition(roleid",{"_index":943,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["updates",{"_index":1000,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["uppercase",{"_index":1192,"title":{},"body":{"classes/RegisterDto.html":{}}}],["upsert",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["usage",{"_index":1412,"title":{},"body":{"index.html":{}}}],["use",{"_index":832,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["useclass",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"modules/RedisCacheModule.html":{}}}],["useguards",{"_index":866,"title":{},"body":{"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["useguards(jwtauthguard",{"_index":871,"title":{},"body":{"controllers/PermissionManagementController.html":{},"controllers/PersonController.html":{},"controllers/RoleManagementController.html":{}}}],["user",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionGuard.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{},"classes/RegisterDto.html":{},"controllers/RoleManagementController.html":{}}}],["user's",{"_index":1005,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["user'})@apiresponse({status",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@requirepermission('roles.assign",{"_index":1208,"title":{},"body":{"controllers/RoleManagementController.html":{}}}],["user.decorator.ts",{"_index":1278,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.emails[0]?.email",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles.reduce((acc",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["user@example.com",{"_index":565,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["userbits",{"_index":825,"title":{},"body":{"guards/PermissionGuard-1.html":{}}}],["userid",{"_index":911,"title":{},"body":{"injectables/PermissionManagementService.html":{},"controllers/RoleManagementController.html":{}}}],["userpermissions",{"_index":978,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["userpermissions.dividedby(permissionbitfield).modulo(2).equals(1",{"_index":980,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["users",{"_index":998,"title":{},"body":{"injectables/PermissionManagementService.html":{},"index.html":{}}}],["userswithrole",{"_index":1013,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["userswithrole.map((ur",{"_index":1015,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["using",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionGuard-1.html":{},"injectables/PermissionManagementService.html":{}}}],["uuid",{"_index":1348,"title":{},"body":{"dependencies.html":{}}}],["valid",{"_index":567,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["validate",{"_index":544,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":546,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatelogin",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatelogin(email",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":492,"title":{},"body":{"classes/CreatePersonDto.html":{},"classes/CreateRoleDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{},"dependencies.html":{}}}],["value",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePersonDto.html":{},"injectables/PermissionDiscoveryService.html":{},"injectables/PermissionManagementService.html":{},"injectables/RedisHealthIndicator.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["variable",{"_index":1279,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1444,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/VerifyEmailDto.html":{}}}],["verificationcode",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationcodeexpiresat",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["verified",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/VerifyEmailDto.html":{}}}],["verify'})@isemail",{"_index":1265,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["verifyemail",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifyemail(@body",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyemail(email",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyemail(verifyemaildto",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyemaildto",{"_index":125,"title":{"classes/VerifyEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["verifyemaildto.code",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyemaildto.email",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":1439,"title":{},"body":{"properties.html":{}}}],["very",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["violation",{"_index":705,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["vs",{"_index":1389,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":958,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["without",{"_index":959,"title":{},"body":{"injectables/PermissionManagementService.html":{}}}],["word.charat(0).touppercase",{"_index":764,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["word.slice(1).tolowercase",{"_index":765,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["workflow",{"_index":1374,"title":{},"body":{"index.html":{}}}],["world",{"_index":69,"title":{},"body":{"injectables/AppService.html":{}}}],["wrapper",{"_index":720,"title":{},"body":{"injectables/PermissionDiscoveryService.html":{}}}],["z\\d",{"_index":1189,"title":{},"body":{"classes/RegisterDto.html":{}}}],["z])(?=.*[a",{"_index":1186,"title":{},"body":{"classes/RegisterDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":1187,"title":{},"body":{"classes/RegisterDto.html":{}}}],["za",{"_index":1188,"title":{},"body":{"classes/RegisterDto.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PersonModule.html":{},"modules/PrismaModule.html":{},"modules/RbacModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Public } from './auth/decorators/public.decorator';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Public()\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPersonModule\n\nPersonModule\n\nAppModule -->\n\nPersonModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nRbacModule\n\nRbacModule\n\nAppModule -->\n\nRbacModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PersonModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RbacModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { JwtAuthGuard } from './auth/guards/jwt-auth.guard';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { RbacModule } from './rbac/rbac.module';\nimport { PersonModule } from './person/person.module';\n\n@Module({\n  imports: [AuthModule, PrismaModule, RbacModule, PersonModule],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login'})@ApiResponse({status: 200, description: 'Login successful'})@ApiResponse({status: 401, description: 'Invalid credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User logout'})@ApiResponse({status: 200, description: 'Logged out successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(refreshTokenDto: RefreshTokenDto, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Refresh access token'})@ApiResponse({status: 200, description: 'Token refreshed successfully'})@ApiResponse({status: 401, description: 'Invalid refresh token'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')@ApiOperation({summary: 'Register new user'})@ApiResponse({status: 201, description: 'User successfully registered'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyEmail(verifyEmailDto: VerifyEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('verify-email')@ApiOperation({summary: 'Verify email address'})@ApiResponse({status: 200, description: 'Email verified successfully'})@ApiResponse({status: 400, description: 'Invalid verification code'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                verifyEmailDto\n                                            \n                                                            VerifyEmailDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  HttpCode,\n  HttpStatus,\n  Req,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { Public } from './decorators/public.decorator';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { VerifyEmailDto } from './dto/verify-email.dto';\nimport { Request } from 'express';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({ status: 200, description: 'Login successful' })\n  @ApiResponse({ status: 401, description: 'Invalid credentials' })\n  async login(@Body() loginDto: LoginDto, @Req() req: Request) {\n    return this.authService.validateLogin(\n      loginDto.email,\n      loginDto.password,\n      req,\n    );\n  }\n\n  @Public()\n  @Post('register')\n  @ApiOperation({ summary: 'Register new user' })\n  @ApiResponse({ status: 201, description: 'User successfully registered' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  async register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto);\n  }\n\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Refresh access token' })\n  @ApiResponse({ status: 200, description: 'Token refreshed successfully' })\n  @ApiResponse({ status: 401, description: 'Invalid refresh token' })\n  async refresh(@Body() refreshTokenDto: RefreshTokenDto, @Req() req: Request) {\n    return this.authService.refreshToken(req);\n  }\n\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User logout' })\n  @ApiResponse({ status: 200, description: 'Logged out successfully' })\n  async logout(@Body() refreshTokenDto: RefreshTokenDto) {\n    return this.authService.revokeRefreshToken(refreshTokenDto.refresh_token);\n  }\n\n  @Public()\n  @Post('verify-email')\n  @ApiOperation({ summary: 'Verify email address' })\n  @ApiResponse({ status: 200, description: 'Email verified successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid verification code' })\n  async verifyEmail(@Body() verifyEmailDto: VerifyEmailDto) {\n    return this.authService.verifyEmail(\n      verifyEmailDto.email,\n      verifyEmailDto.code,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get(\n            'JWT_ACCESS_TOKEN_EXPIRY',\n            '15m',\n          ),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    PrismaModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cleanupExpiredTokens\n                            \n                            \n                                    Private\n                                extractRefreshTokenFromCookie\n                            \n                            \n                                    Private\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Private\n                                getDurationInMs\n                            \n                            \n                                    Private\n                                getRefreshTokenExpiryDate\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                revokeAllUserTokens\n                            \n                            \n                                    Async\n                                revokeRefreshToken\n                            \n                            \n                                    Async\n                                revokeTokensByDevice\n                            \n                            \n                                    Async\n                                validateLogin\n                            \n                            \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanupExpiredTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanupExpiredTokens()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:388\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRefreshTokenFromCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRefreshTokenFromCookie(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Extract refresh token from cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(personId: string, req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                personId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getDurationInMs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDurationInMs(duration: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Convert duration string (e.g., '7d', '15m') to milliseconds\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                duration\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getRefreshTokenExpiryDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRefreshTokenExpiryDate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Get refresh token expiry date based on JWT_REFRESH_TOKEN_EXPIRY\n\n\n                        \n                            Returns :         Date\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:258\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        revokeAllUserTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAllUserTokens(personId: string, reason: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:354\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                personId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                reason\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Manual revocation of all tokens'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        revokeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeRefreshToken(refreshToken: string, reason: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:336\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                reason\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Manual logout'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        revokeTokensByDevice\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeTokensByDevice(personId: string, deviceDetails: string, reason: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:370\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                personId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                deviceDetails\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                reason\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Manual device revocation'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateLogin(email: string, password: string, req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyEmail(email: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:410\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaService } from '../prisma/prisma.service';\nimport * as bcrypt from 'bcrypt';\nimport { Request } from 'express';\nimport { ConfigService } from '@nestjs/config';\nimport ms from 'ms';\nimport { JwtPayload } from './interfaces/jwt-payload.interface';\nimport Decimal from 'decimal.js';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private prisma: PrismaService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n  ) {}\n\n  /**\n   * Convert duration string (e.g., '7d', '15m') to milliseconds\n   */\n  private getDurationInMs(duration: string): number {\n    return ms(duration);\n  }\n\n  /**\n   * Get refresh token expiry date based on JWT_REFRESH_TOKEN_EXPIRY\n   */\n  private getRefreshTokenExpiryDate(): Date {\n    const duration = this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRY',\n      '7d',\n    );\n    const durationMs = this.getDurationInMs(duration);\n    return new Date(Date.now() + durationMs);\n  }\n\n  /**\n   * Extract refresh token from cookie\n   */\n  private extractRefreshTokenFromCookie(req: Request): string | null {\n    const refreshToken = req.cookies?.refresh_token;\n    return refreshToken || null;\n  }\n\n  async validateLogin(email: string, password: string, req: Request) {\n    // Find the email record\n    const emailRecord = await this.prisma.email.findUnique({\n      where: { email },\n      include: { person: true },\n    });\n\n    if (!emailRecord || !emailRecord.person || !emailRecord.isVerified) {\n      throw new UnauthorizedException(\n        'Invalid credentials or unverified email',\n      );\n    }\n\n    const person = emailRecord.person;\n\n    if (!person.passwordHash) {\n      throw new UnauthorizedException('Password not set');\n    }\n\n    if (person.accountStatus !== 'active') {\n      throw new UnauthorizedException('Account is not active');\n    }\n\n    const isPasswordValid = await bcrypt.compare(password, person.passwordHash);\n    if (!isPasswordValid) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    // Update last login\n    await this.prisma.person.update({\n      where: { id: person.id },\n      data: { lastLoginAt: new Date() },\n    });\n\n    return this.generateTokens(person.id, req);\n  }\n\n  async register(data: {\n    email: string;\n    password: string;\n    nameEn?: string;\n    nameAr?: string;\n  }) {\n    // Check if email exists\n    const existingEmail = await this.prisma.email.findUnique({\n      where: { email: data.email },\n    });\n\n    if (existingEmail) {\n      throw new BadRequestException('Email already exists');\n    }\n\n    const passwordHash = await bcrypt.hash(data.password, 10);\n\n    // Create person and email in a transaction\n    const result = await this.prisma.$transaction(async (prisma) => {\n      const person = await prisma.person.create({\n        data: {\n          nameEn: data.nameEn,\n          nameAr: data.nameAr,\n          passwordHash,\n          accountStatus: 'active',\n        },\n      });\n\n      const verificationCode = Math.random()\n        .toString(36)\n        .substring(2, 8)\n        .toUpperCase();\n      const email = await prisma.email.create({\n        data: {\n          email: data.email,\n          isPrimary: true,\n          verificationCode,\n          verificationCodeExpiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours\n          person: {\n            connect: { id: person.id },\n          },\n        },\n      });\n\n      return { person, email };\n    });\n\n    // TODO: Send verification email with verificationCode\n\n    return {\n      message: 'Registration successful. Please verify your email.',\n      personId: result.person.id,\n    };\n  }\n\n  private async generateTokens(personId: string, req: Request) {\n    // Get person's permissions through roles\n    const personWithRoles = await this.prisma.person.findUnique({\n      where: { id: personId },\n      include: {\n        roles: {\n          include: {\n            role: {\n              include: {\n                permissions: {\n                  include: {\n                    permission: {\n                      select: {\n                        bitfield: true,\n                        isDeprecated: true,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        emails: {\n          where: { isPrimary: true },\n        },\n      },\n    });\n\n    // Calculate combined permission bitfield\n    const permissionBits = personWithRoles.roles.reduce((acc, pr) => {\n      const roleBits = pr.role.permissions.reduce(\n        (roleAcc, rp) =>\n          !rp.permission.isDeprecated\n            ? roleAcc.add(new Decimal(rp.permission.bitfield))\n            : roleAcc,\n        new Decimal(0),\n      );\n      return acc.add(roleBits);\n    }, new Decimal(0));\n\n    // Generate access token with permissions\n    const accessTokenPayload: JwtPayload = {\n      sub: personId,\n      email: personWithRoles.emails[0]?.email,\n      permissionBits: permissionBits.toString(),\n    };\n\n    const accessToken = this.jwtService.sign(accessTokenPayload, {\n      expiresIn: process.env.JWT_ACCESS_TOKEN_EXPIRY || '15m',\n    });\n\n    // Create refresh token record to get CUID\n    const expiresAt = this.getRefreshTokenExpiryDate();\n    const { id: tokenId } = await this.prisma.refreshToken.create({\n      select: { id: true },\n      data: {\n        personId,\n        hashedToken: 'pending', // Temporary value\n        deviceDetails: req.headers['user-agent'] || 'Unknown Device',\n        ipAddress: req.ip || req.socket.remoteAddress || 'Unknown IP',\n        expiresAt,\n        isRevoked: true, // Temporarily revoked until we update with real values\n      },\n    });\n\n    // Generate refresh token with the CUID\n    const refreshTokenPayload = {\n      sub: personId,\n      jti: tokenId,\n    };\n\n    const refreshToken = this.jwtService.sign(refreshTokenPayload, {\n      expiresIn: this.configService.get(\n        'JWT_REFRESH_TOKEN_EXPIRY',\n        '7d',\n      ),\n    });\n\n    // Hash the refresh token\n    const hashedToken = await bcrypt.hash(refreshToken, 10);\n\n    // Update the record with actual values using upsert to ensure atomicity\n    await this.prisma.refreshToken.upsert({\n      where: { id: tokenId },\n      create: {\n        id: tokenId,\n        personId,\n        hashedToken,\n        deviceDetails: req.headers['user-agent'] || 'Unknown Device',\n        ipAddress: req.ip || req.socket.remoteAddress || 'Unknown IP',\n        expiresAt,\n        isRevoked: false,\n        lastUsedAt: new Date(),\n      },\n      update: {\n        hashedToken,\n        deviceDetails: req.headers['user-agent'] || 'Unknown Device',\n        ipAddress: req.ip || req.socket.remoteAddress || 'Unknown IP',\n        expiresAt,\n        isRevoked: false,\n        lastUsedAt: new Date(),\n      },\n    });\n\n    return {\n      access_token: accessToken,\n      refresh_token: refreshToken,\n      token_type: 'Bearer',\n      expires_in:\n        this.getDurationInMs(\n          this.configService.get('JWT_ACCESS_TOKEN_EXPIRY', '15m'),\n        ) / 1000, // Convert ms to seconds\n    };\n  }\n\n  async refreshToken(req: Request) {\n    try {\n      const refreshToken = this.extractRefreshTokenFromCookie(req);\n      if (!refreshToken) {\n        throw new UnauthorizedException('No refresh token provided');\n      }\n\n      const payload = await this.jwtService.verifyAsync(refreshToken, {\n        secret: this.configService.get('JWT_REFRESH_SECRET'),\n      });\n\n      const user = await this.prisma.person.findUnique({\n        where: { id: payload.sub },\n        include: {\n          roles: {\n            include: {\n              role: {\n                include: {\n                  permissions: {\n                    include: {\n                      permission: {\n                        select: {\n                          bitfield: true,\n                          isDeprecated: true,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n          emails: {\n            where: { isPrimary: true },\n          },\n        },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User no longer exists');\n      }\n\n      // Calculate combined permission bitfield\n      const permissionBits = user.roles.reduce((acc, pr) => {\n        const roleBits = pr.role.permissions.reduce(\n          (roleAcc, rp) =>\n            !rp.permission.isDeprecated\n              ? roleAcc.add(new Decimal(rp.permission.bitfield))\n              : roleAcc,\n          new Decimal(0),\n        );\n        return acc.add(roleBits);\n      }, new Decimal(0));\n\n      // Generate new access token with updated permissions\n      const accessTokenPayload: JwtPayload = {\n        sub: user.id,\n        email: user.emails[0]?.email,\n        permissionBits: permissionBits.toString(),\n      };\n\n      const accessToken = this.jwtService.sign(accessTokenPayload, {\n        expiresIn: this.configService.get('JWT_ACCESS_TOKEN_EXPIRY', '15m'),\n      });\n\n      return {\n        access_token: accessToken,\n        token_type: 'Bearer',\n        expires_in:\n          this.getDurationInMs(\n            this.configService.get('JWT_ACCESS_TOKEN_EXPIRY', '15m'),\n          ) / 1000, // Convert ms to seconds\n      };\n    } catch {\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n  }\n\n  async revokeRefreshToken(\n    refreshToken: string,\n    reason: string = 'Manual logout',\n  ) {\n    try {\n      const decoded = this.jwtService.verify(refreshToken);\n      await this.prisma.refreshToken.update({\n        where: { id: decoded.jti },\n        data: {\n          isRevoked: true,\n          revokedReason: reason,\n        },\n      });\n    } catch {\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n  }\n\n  async revokeAllUserTokens(\n    personId: string,\n    reason: string = 'Manual revocation of all tokens',\n  ) {\n    await this.prisma.refreshToken.updateMany({\n      where: {\n        personId,\n        isRevoked: false,\n      },\n      data: {\n        isRevoked: true,\n        revokedReason: reason,\n      },\n    });\n  }\n\n  async revokeTokensByDevice(\n    personId: string,\n    deviceDetails: string,\n    reason: string = 'Manual device revocation',\n  ) {\n    await this.prisma.refreshToken.updateMany({\n      where: {\n        personId,\n        deviceDetails,\n        isRevoked: false,\n      },\n      data: {\n        isRevoked: true,\n        revokedReason: reason,\n      },\n    });\n  }\n\n  async cleanupExpiredTokens() {\n    const now = new Date();\n    await this.prisma.refreshToken.updateMany({\n      where: {\n        expiresAt: { lt: now },\n        isRevoked: false,\n      },\n      data: {\n        isRevoked: true,\n        revokedReason: 'Token expired during cleanup',\n      },\n    });\n\n    // Optional: Delete very old tokens (e.g., expired more than 30 days ago)\n    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n    await this.prisma.refreshToken.deleteMany({\n      where: {\n        expiresAt: { lt: thirtyDaysAgo },\n      },\n    });\n  }\n\n  async verifyEmail(email: string, code: string) {\n    try {\n      const emailRecord = await this.prisma.email.findUnique({\n        where: { email },\n      });\n\n      if (\n        !emailRecord ||\n        !emailRecord.verificationCode ||\n        emailRecord.verificationCode !== code ||\n        emailRecord.verificationCodeExpiresAt \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePersonDto.html":{"url":"classes/CreatePersonDto.html","title":"class - CreatePersonDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePersonDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/person/dto/create-person.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                accountStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameAr\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameEn\n                            \n                            \n                                    \n                                    \n                                    \n                                passwordHash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        accountStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'active'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Account status', default: 'active'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/person/dto/create-person.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameAr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Arabic name of the person'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/person/dto/create-person.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameEn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'English name of the person'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/person/dto/create-person.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        passwordHash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password hash for authentication'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/person/dto/create-person.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreatePersonDto {\n  @ApiPropertyOptional({ description: 'English name of the person' })\n  @IsOptional()\n  @IsString()\n  nameEn?: string;\n\n  @ApiPropertyOptional({ description: 'Arabic name of the person' })\n  @IsOptional()\n  @IsString()\n  nameAr?: string;\n\n  @ApiProperty({ description: 'Password hash for authentication' })\n  @IsNotEmpty()\n  @IsString()\n  passwordHash: string;\n\n  @ApiProperty({ description: 'Account status', default: 'active' })\n  @IsOptional()\n  @IsString()\n  accountStatus?: string = 'active';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rbac/dto/create-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                color\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Hex color code for the role', required: false})@IsHexColor()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rbac/dto/create-role.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the role', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rbac/dto/create-role.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the role'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rbac/dto/create-role.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Initial permission codes to assign', required: false})@IsArray()@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rbac/dto/create-role.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsArray, IsHexColor } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateRoleDto {\n  @ApiProperty({ description: 'Name of the role' })\n  @IsString()\n  name: string;\n\n  @ApiProperty({ description: 'Description of the role', required: false })\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @ApiProperty({ description: 'Hex color code for the role', required: false })\n  @IsHexColor()\n  @IsOptional()\n  color?: string;\n\n  @ApiProperty({\n    description: 'Initial permission codes to assign',\n    required: false,\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @IsOptional()\n  permissions?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\nimport { IS_PUBLIC_KEY } from '@/auth/decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            permissionBits\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        permissionBits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        permissionBits:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  sub: string; // Person ID\n  email: string; // Primary email\n  permissionBits: string; // Combined permission bitfield as string (BigInt serialized)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from '../../prisma/prisma.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private prisma: PrismaService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: { sub: string }) {\n    const person = await this.prisma.person.findUnique({\n      where: { id: payload.sub },\n      include: {\n        emails: {\n          where: { isPrimary: true },\n          take: 1,\n        },\n      },\n    });\n\n    if (!person || person.accountStatus !== 'active') {\n      throw new UnauthorizedException();\n    }\n\n    // Return user object to be attached to request\n    return {\n      id: person.id,\n      email: person.emails[0]?.email,\n      nameEn: person.nameEn,\n      nameAr: person.nameAr,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com', description: 'User email address'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', description: 'User password'})@IsString()@MinLength(8, {message: 'Password must be at least 8 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty({\n    example: 'user@example.com',\n    description: 'User email address',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    example: 'password123',\n    description: 'User password',\n  })\n  @IsString()\n  @MinLength(8, { message: 'Password must be at least 8 characters long' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PermissionDiscoveryService.html":{"url":"injectables/PermissionDiscoveryService.html","title":"injectable - PermissionDiscoveryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PermissionDiscoveryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rbac/services/permission-discovery.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                discoverPermissions\n                            \n                            \n                                    Private\n                                formatCategoryName\n                            \n                            \n                                    Private\n                                formatPermissionName\n                            \n                            \n                                    Async\n                                getPermissionsByCategory\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Private\n                                    Async\n                                syncPermissions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discoveryService: DiscoveryService, metadataScanner: MetadataScanner, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/rbac/services/permission-discovery.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discoveryService\n                                                  \n                                                        \n                                                                    DiscoveryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metadataScanner\n                                                  \n                                                        \n                                                                    MetadataScanner\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        discoverPermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    discoverPermissions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-discovery.service.ts:145\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatCategoryName\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatCategoryName(str: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-discovery.service.ts:257\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                str\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatPermissionName\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatPermissionName(str: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-discovery.service.ts:250\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                str\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPermissionsByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPermissionsByCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-discovery.service.ts:265\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-discovery.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        syncPermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    syncPermissions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-discovery.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PermissionDiscoveryService.name)\n                    \n                \n                    \n                        \n                                Defined in src/rbac/services/permission-discovery.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, Logger } from '@nestjs/common';\nimport { DiscoveryService, MetadataScanner } from '@nestjs/core';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { PERMISSION_KEY } from '../decorators/require-permission.decorator';\nimport { Prisma } from '@prisma/client';\nimport Decimal from 'decimal.js';\n\n@Injectable()\nexport class PermissionDiscoveryService implements OnModuleInit {\n  private readonly logger = new Logger(PermissionDiscoveryService.name);\n\n  constructor(\n    private readonly discoveryService: DiscoveryService,\n    private readonly metadataScanner: MetadataScanner,\n    private readonly prisma: PrismaService,\n  ) {}\n\n  async onModuleInit() {\n    try {\n      this.logger.log('Starting permission discovery...');\n      await this.syncPermissions();\n      this.logger.log('Permission discovery completed successfully');\n    } catch (error) {\n      this.logger.error('Permission discovery failed', error.stack);\n      // Don't throw here as it would prevent app from starting\n      // Instead, log error and let admin know they need to fix it\n    }\n  }\n\n  private async syncPermissions() {\n    try {\n      const codePermissions = await this.discoverPermissions();\n      this.logger.log(\n        `Discovered ${codePermissions.length} permissions from code`,\n      );\n\n      await this.prisma.$transaction(async (tx) => {\n        // Get existing permissions from DB\n        const dbPermissions = await tx.permission.findMany();\n\n        // Add new permissions found in code\n        const newPermissions = codePermissions.filter(\n          (cp) => !dbPermissions.some((dp) => dp.code === cp.code),\n        );\n\n        if (newPermissions.length > 0) {\n          this.logger.log(\n            `Adding ${newPermissions.length} new permissions: ${newPermissions.map((p) => p.code).join(', ')}`,\n          );\n          await tx.permission.createMany({\n            data: newPermissions,\n            skipDuplicates: true,\n          });\n\n          // If SUPER_ADMIN exists, grant new permissions automatically\n          const superAdmin = await tx.role.findUnique({\n            where: { name: 'SUPER_ADMIN' },\n          });\n\n          if (superAdmin) {\n            const createdPermissions = await tx.permission.findMany({\n              where: {\n                code: {\n                  in: newPermissions.map((p) => p.code),\n                },\n              },\n            });\n\n            await tx.rolePermission.createMany({\n              data: createdPermissions.map((p) => ({\n                roleId: superAdmin.id,\n                permissionId: p.id,\n              })),\n              skipDuplicates: true,\n            });\n\n            this.logger.log('Granted new permissions to SUPER_ADMIN role');\n          }\n        } else {\n          this.logger.log('All permissions are up to date');\n        }\n\n        // Mark deprecated permissions\n        const obsoletePermissions = dbPermissions.filter(\n          (dp) => !codePermissions.some((cp) => cp.code === dp.code),\n        );\n\n        if (obsoletePermissions.length > 0) {\n          this.logger.warn(\n            `Found ${obsoletePermissions.length} deprecated permissions: ${obsoletePermissions.map((p) => p.code).join(', ')}`,\n          );\n          await tx.permission.updateMany({\n            where: {\n              code: {\n                in: obsoletePermissions.map((p) => p.code),\n              },\n            },\n            data: {\n              isDeprecated: true,\n            },\n          });\n        }\n\n        // Log summary\n        const summary = [\n          `${codePermissions.length} total permissions`,\n          newPermissions.length > 0\n            ? `${newPermissions.length} added`\n            : 'none added',\n          obsoletePermissions.length > 0\n            ? `${obsoletePermissions.length} deprecated`\n            : 'none deprecated',\n          `${dbPermissions.length + newPermissions.length - obsoletePermissions.length} active in database`,\n        ].join(', ');\n        this.logger.log(`Permission sync summary: ${summary}`);\n\n        // Only log categories if there were changes\n        if (newPermissions.length > 0 || obsoletePermissions.length > 0) {\n          const categories = [\n            ...new Set(codePermissions.map((p) => p.category)),\n          ];\n          this.logger.log(`Permission categories: ${categories.join(', ')}`);\n        }\n      });\n    } catch (error) {\n      this.logger.error('Failed to sync permissions', error.stack);\n      if (error instanceof Prisma.PrismaClientKnownRequestError) {\n        // Handle specific Prisma errors\n        switch (error.code) {\n          case 'P2002':\n            this.logger.error(\n              'Unique constraint violation during permission sync',\n            );\n            break;\n          default:\n            this.logger.error(\n              `Database error during permission sync: ${error.code}`,\n            );\n        }\n      }\n      throw error;\n    }\n  }\n\n  private async discoverPermissions(): Promise {\n    try {\n      const permissions: Prisma.PermissionCreateInput[] = [];\n      const controllers = this.discoveryService.getControllers();\n      let sortOrder = 0;\n\n      // Get last permission to calculate next bitfield\n      const lastPermission = await this.prisma.permission.findFirst({\n        orderBy: { bitfield: 'desc' },\n      });\n      let nextBitfield = lastPermission\n        ? new Decimal(lastPermission.bitfield).mul(2)\n        : new Decimal(1);\n\n      controllers.forEach((wrapper) => {\n        const { instance } = wrapper;\n        if (!instance) return;\n\n        // Only process actual controller instances\n        const isController = instance.constructor.name.includes('Controller');\n        if (!isController) return;\n\n        // Check class-level permissions first\n        const classPermission = Reflect.getMetadata(\n          PERMISSION_KEY,\n          instance.constructor,\n        );\n        if (classPermission) {\n          const [category, action] = classPermission.split('.');\n          if (\n            category &&\n            action &&\n            !permissions.some((p) => p.code === classPermission)\n          ) {\n            permissions.push({\n              code: classPermission,\n              name: this.formatPermissionName(action),\n              category: this.formatCategoryName(category),\n              description: `Can ${action.toLowerCase()} ${category.toLowerCase()}`,\n              sortOrder: sortOrder++,\n              isDeprecated: false,\n              bitfield: nextBitfield,\n            });\n            nextBitfield = nextBitfield.mul(2);\n          }\n        }\n\n        const prototype = Object.getPrototypeOf(instance);\n        this.metadataScanner.scanFromPrototype(\n          instance,\n          prototype,\n          (method) => {\n            try {\n              const handler = instance[method];\n              const permission = Reflect.getMetadata(PERMISSION_KEY, handler);\n\n              if (permission) {\n                const [category, action] = permission.split('.');\n                if (!category || !action) {\n                  this.logger.warn(\n                    `Invalid permission format: ${permission} in ${instance.constructor.name}.${method}`,\n                  );\n                  return;\n                }\n\n                // Skip if this permission code already exists\n                if (permissions.some((p) => p.code === permission)) {\n                  return;\n                }\n\n                permissions.push({\n                  code: permission,\n                  name: this.formatPermissionName(action),\n                  category: this.formatCategoryName(category),\n                  description: `Can ${action.toLowerCase()} ${category.toLowerCase()}`,\n                  sortOrder: sortOrder++,\n                  isDeprecated: false,\n                  bitfield: nextBitfield,\n                });\n\n                nextBitfield = nextBitfield.mul(2); // Double for next power of 2\n              }\n            } catch (error) {\n              this.logger.error(\n                `Failed to process permission in ${instance.constructor.name}.${method}`,\n                error.stack,\n              );\n            }\n          },\n        );\n      });\n\n      // Sort permissions by category and name\n      return permissions.sort((a, b) => {\n        if (a.category === b.category) {\n          return a.name.localeCompare(b.name);\n        }\n        return a.category.localeCompare(b.category);\n      });\n    } catch (error) {\n      this.logger.error('Failed to discover permissions', error.stack);\n      throw error;\n    }\n  }\n\n  private formatPermissionName(str: string): string {\n    return str\n      .split('_')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n  }\n\n  private formatCategoryName(str: string): string {\n    return str\n      .split('_')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n  }\n\n  // Helper method for role management UI\n  async getPermissionsByCategory() {\n    try {\n      const permissions = await this.prisma.permission.findMany({\n        where: { isDeprecated: false },\n        orderBy: [{ category: 'asc' }, { sortOrder: 'asc' }],\n      });\n\n      return permissions.reduce(\n        (acc, permission) => {\n          if (!acc[permission.category]) {\n            acc[permission.category] = [];\n          }\n          acc[permission.category].push(permission);\n          return acc;\n        },\n        {} as Record,\n      );\n    } catch (error) {\n      this.logger.error('Failed to get permissions by category', error.stack);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PermissionGuard.html":{"url":"guards/PermissionGuard.html","title":"guard - PermissionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PermissionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/permission.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, permissionService: PermissionManagementService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/permission.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permissionService\n                                                  \n                                                        \n                                                                        PermissionManagementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/permission.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { PermissionManagementService } from '../../rbac/services/permission-management.service';\n\n@Injectable()\nexport class PermissionGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private permissionService: PermissionManagementService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const requiredPermissions = this.reflector.get(\n      'permissions',\n      context.getHandler(),\n    );\n\n    if (!requiredPermissions) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n\n    if (!user) {\n      return false;\n    }\n\n    // Check all required permissions\n    const checks = await Promise.all(\n      requiredPermissions.map((permission) =>\n        this.permissionService.hasPermission(user.id, permission),\n      ),\n    );\n\n    // User must have all permissions\n    return checks.every(Boolean);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PermissionGuard-1.html":{"url":"guards/PermissionGuard-1.html","title":"guard - PermissionGuard-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PermissionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/rbac/guards/permission.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                CACHE_TTL\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, prisma: PrismaService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/rbac/guards/permission.guard.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/guards/permission.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { PERMISSION_KEY } from '../decorators/require-permission.decorator';\nimport { Cache } from 'cache-manager';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Inject } from '@nestjs/common';\nimport Decimal from 'decimal.js';\n\n@Injectable()\nexport class PermissionGuard implements CanActivate {\n  private readonly logger = new Logger(PermissionGuard.name);\n  private readonly CACHE_TTL = 300; // 5 minutes\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly prisma: PrismaService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    try {\n      const requiredPermission = this.reflector.get(\n        PERMISSION_KEY,\n        context.getHandler(),\n      );\n\n      if (!requiredPermission) return true;\n\n      const request = context.switchToHttp().getRequest();\n      const personId = request.user?.id;\n\n      if (!personId) {\n        throw new UnauthorizedException('User not authenticated');\n      }\n\n      // Try to get permissions from cache\n      const cacheKey = `permissions:${personId}`;\n      let hasPermission = await this.cacheManager.get(\n        `${cacheKey}:${requiredPermission}`,\n      );\n\n      if (hasPermission !== undefined) {\n        return hasPermission;\n      }\n\n      // Get permission bitfield from database\n      const permission = await this.prisma.permission.findUnique({\n        where: { code: requiredPermission },\n        select: { bitfield: true, isDeprecated: true },\n      });\n\n      if (!permission || permission.isDeprecated) {\n        this.logger.warn(\n          `Permission not found or deprecated: ${requiredPermission}`,\n        );\n        return false;\n      }\n\n      // Get person with roles and their permissions\n      const person = await this.prisma.person.findUnique({\n        where: { id: personId },\n        include: {\n          roles: {\n            include: {\n              role: {\n                include: {\n                  permissions: {\n                    include: {\n                      permission: {\n                        select: {\n                          bitfield: true,\n                          isDeprecated: true,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      });\n\n      if (!person) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Super admin check\n      const isSuperAdmin = person.roles.some(\n        (pr) => pr.role.name === 'SUPER_ADMIN',\n      );\n      if (isSuperAdmin) {\n        await this.cacheManager.set(\n          `${cacheKey}:${requiredPermission}`,\n          true,\n          this.CACHE_TTL,\n        );\n        return true;\n      }\n\n      // Calculate combined permission bitfield (using bitwise OR)\n      const userBits = person.roles.reduce((acc, pr) => {\n        const roleBits = pr.role.permissions.reduce(\n          (roleAcc, rp) => roleAcc.plus(new Decimal(rp.permission.bitfield)),\n          new Decimal(0),\n        );\n        return acc.plus(roleBits);\n      }, new Decimal(0));\n\n      // Check if user has the required permission using bitwise operations\n      const permissionBitfield = new Decimal(permission.bitfield);\n      // For bitwise operations with Decimal, we need to use modulo 2 division to simulate AND\n      hasPermission = userBits\n        .dividedToIntegerBy(permissionBitfield)\n        .modulo(2)\n        .equals(1);\n\n      // Cache the result\n      await this.cacheManager.set(\n        `${cacheKey}:${requiredPermission}`,\n        hasPermission,\n        this.CACHE_TTL,\n      );\n\n      if (!hasPermission) {\n        this.logger.warn(\n          `Permission denied: ${requiredPermission} for user ${personId}`,\n        );\n        throw new UnauthorizedException('Insufficient permissions');\n      }\n\n      return hasPermission;\n    } catch (error) {\n      this.logger.error(\n        `Permission check failed: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PermissionManagementController.html":{"url":"controllers/PermissionManagementController.html","title":"controller - PermissionManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PermissionManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rbac/controllers/permission-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                permissions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createCategory\n                            \n                            \n                                    \n                                    Async\n                                createPermission\n                            \n                            \n                                    \n                                    Async\n                                getPermissionDashboard\n                            \n                            \n                                    \n                                    Async\n                                getRole\n                            \n                            \n                                    \n                                    Async\n                                updateRolePermissions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('categories')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/permission-management.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPermission(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('permissions')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/permission-management.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPermissionDashboard\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPermissionDashboard()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('dashboard')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/permission-management.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRole(roleId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('roles/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/permission-management.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateRolePermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRolePermissions(roleId: string, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('roles/:id/permissions')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/permission-management.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Body,\n  Param,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../guards/permission.guard';\nimport { RequirePermission } from '../decorators/require-permission.decorator';\nimport { PermissionManagementService } from '../services/permission-management.service';\n\n@Controller('permissions')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@RequirePermission('permissions.manage')\nexport class PermissionManagementController {\n  constructor(private permissionService: PermissionManagementService) {}\n\n  @Get('dashboard')\n  async getPermissionDashboard() {\n    const [categories, roles] = await Promise.all([\n      this.permissionService.getPermissionCategories(),\n      this.permissionService.getRoles(true),\n    ]);\n\n    return {\n      categories,\n      roles,\n      stats: {\n        totalPermissions: categories.reduce(\n          (acc, cat) => acc + cat.permissions.length,\n          0,\n        ),\n        totalRoles: roles.length,\n        systemRoles: roles.filter((r) => r.isSystem).length,\n      },\n    };\n  }\n\n  @Post('categories')\n  async createCategory(\n    @Body() data: { name: string; description?: string; sortOrder?: number },\n  ) {\n    return this.permissionService.createPermissionCategory(data);\n  }\n\n  @Post('permissions')\n  async createPermission(\n    @Body()\n    data: {\n      code: string;\n      name: string;\n      description?: string;\n      category: string;\n    },\n  ) {\n    return this.permissionService.createPermission(data);\n  }\n\n  @Put('roles/:id/permissions')\n  async updateRolePermissions(\n    @Param('id') roleId: string,\n    @Body() data: { permissionIds: string[] },\n  ) {\n    return this.permissionService.updateRolePermissions(\n      roleId,\n      data.permissionIds,\n    );\n  }\n\n  @Get('roles/:id')\n  async getRole(@Param('id') roleId: string) {\n    return this.permissionService.getRoleWithPermissions(roleId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PermissionManagementService.html":{"url":"injectables/PermissionManagementService.html","title":"injectable - PermissionManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PermissionManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rbac/services/permission-management.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRoleToUser\n                            \n                            \n                                    Async\n                                calculateEffectivePermissions\n                            \n                            \n                                    Private\n                                    Async\n                                clearPermissionCache\n                            \n                            \n                                    Private\n                                    Async\n                                clearUserPermissionCache\n                            \n                            \n                                    Async\n                                createPermission\n                            \n                            \n                                    Async\n                                createPermissionCategory\n                            \n                            \n                                    Async\n                                createRole\n                            \n                            \n                                    Private\n                                    Async\n                                getNextRolePosition\n                            \n                            \n                                    Async\n                                getPermissionCategories\n                            \n                            \n                                    Async\n                                getPermissionDashboard\n                            \n                            \n                                    Async\n                                getRoles\n                            \n                            \n                                    Async\n                                getRoleWithPermissions\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                            \n                                    Async\n                                hasPermission\n                            \n                            \n                                    Async\n                                removeRoleFromUser\n                            \n                            \n                                    Async\n                                toggleRolePermission\n                            \n                            \n                                    Async\n                                updateRolePermissions\n                            \n                            \n                                    Async\n                                updateRolePosition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/rbac/services/permission-management.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRoleToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRoleToUser(userId: string, roleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:285\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        calculateEffectivePermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateEffectivePermissions(personId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                personId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        clearPermissionCache\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearPermissionCache(roleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:330\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        clearUserPermissionCache\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearUserPermissionCache(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:340\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPermission(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPermissionCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPermissionCategory(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRole(data: CreateRoleDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:185\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getNextRolePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNextRolePosition()\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:323\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPermissionCategories\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPermissionCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPermissionDashboard\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPermissionDashboard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoles(includePermissions: )\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                includePermissions\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRoleWithPermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoleWithPermissions(roleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:344\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hasPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasPermission(personId: string, permissionCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                personId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                permissionCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeRoleFromUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRoleFromUser(userId: string, roleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:307\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        toggleRolePermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleRolePermission(roleId: string, permissionCode: string, enabled: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:215\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                permissionCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                enabled\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateRolePermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRolePermissions(roleId: string, permissionIds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                permissionIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateRolePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRolePosition(roleId: string, newPosition: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rbac/services/permission-management.service.ts:262\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPosition\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { CreateRoleDto } from '../dto/create-role.dto';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Cache } from 'cache-manager';\nimport { Inject } from '@nestjs/common';\nimport Decimal from 'decimal.js';\n\n@Injectable()\nexport class PermissionManagementService {\n  constructor(\n    private prisma: PrismaService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  async getPermissionCategories() {\n    const permissions = await this.prisma.permission.findMany({\n      orderBy: [{ category: 'asc' }, { sortOrder: 'asc' }],\n    });\n\n    // Group permissions by category\n    const categories = permissions.reduce(\n      (acc, permission) => {\n        if (!acc[permission.category]) {\n          acc[permission.category] = {\n            name: permission.category,\n            permissions: [],\n          };\n        }\n        acc[permission.category].permissions.push(permission);\n        return acc;\n      },\n      {} as Record,\n    );\n\n    return Object.values(categories);\n  }\n\n  async getPermissionDashboard() {\n    const [categories, roles] = await Promise.all([\n      this.getPermissionCategories(),\n      this.getRoles(true),\n    ]);\n\n    return {\n      categories,\n      roles,\n      stats: {\n        totalPermissions: categories.reduce(\n          (acc, cat) => acc + cat.permissions.length,\n          0,\n        ),\n        totalRoles: roles.length,\n        systemRoles: roles.filter((r) => r.isSystem).length,\n      },\n    };\n  }\n\n  async createPermissionCategory(data: {\n    name: string;\n    description?: string;\n    sortOrder?: number;\n  }) {\n    // Since categories are just strings in the Permission model,\n    // we'll return the category info without creating a record\n    return {\n      name: data.name,\n      description: data.description,\n      sortOrder: data.sortOrder,\n      permissions: [],\n    };\n  }\n\n  async createPermission(data: {\n    code: string;\n    name: string;\n    description?: string;\n    category: string;\n  }) {\n    const lastPermission = await this.prisma.permission.findFirst({\n      orderBy: { bitfield: 'desc' },\n    });\n\n    const bitfield = lastPermission\n      ? new Decimal(lastPermission.bitfield).mul(2)\n      : new Decimal(1);\n\n    return this.prisma.permission.create({\n      data: { ...data, bitfield },\n    });\n  }\n\n  async getRoles(includePermissions = false) {\n    return this.prisma.role.findMany({\n      include: {\n        permissions: includePermissions\n          ? {\n              include: { permission: true },\n            }\n          : false,\n      },\n      orderBy: { sortOrder: 'asc' },\n    });\n  }\n\n  async updateRolePermissions(roleId: string, permissionIds: string[]) {\n    // Delete existing permissions\n    await this.prisma.rolePermission.deleteMany({\n      where: { roleId },\n    });\n\n    // Add new permissions\n    await this.prisma.rolePermission.createMany({\n      data: permissionIds.map((permissionId) => ({\n        roleId,\n        permissionId,\n      })),\n    });\n\n    return this.getRoleWithPermissions(roleId);\n  }\n\n  async getRoleWithPermissions(roleId: string) {\n    return this.prisma.role.findUnique({\n      where: { id: roleId },\n      include: {\n        permissions: {\n          include: { permission: true },\n        },\n      },\n    });\n  }\n\n  async calculateEffectivePermissions(personId: string) {\n    const person = await this.prisma.person.findUnique({\n      where: { id: personId },\n      include: {\n        roles: {\n          include: {\n            role: {\n              include: {\n                permissions: {\n                  include: { permission: true },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // Combine all permission bitfields using Decimal\n    return person.roles.reduce((acc, role) => {\n      const roleBitfield = role.role.permissions.reduce(\n        (roleAcc, perm) => roleAcc.add(new Decimal(perm.permission.bitfield)),\n        new Decimal(0),\n      );\n      return acc.add(roleBitfield);\n    }, new Decimal(0));\n  }\n\n  async hasPermission(\n    personId: string,\n    permissionCode: string,\n  ): Promise {\n    const [userPermissions, permission] = await Promise.all([\n      this.calculateEffectivePermissions(personId),\n      this.prisma.permission.findUnique({\n        where: { code: permissionCode },\n      }),\n    ]);\n\n    if (!permission) {\n      return false;\n    }\n\n    const permissionBitfield = new Decimal(permission.bitfield);\n    return userPermissions.dividedBy(permissionBitfield).modulo(2).equals(1);\n  }\n\n  async createRole(data: CreateRoleDto) {\n    const role = await this.prisma.role.create({\n      data: {\n        name: data.name,\n        description: data.description,\n        isSystem: false,\n        sortOrder: await this.getNextRolePosition(),\n      },\n    });\n\n    if (data.permissions?.length) {\n      const permissions = await this.prisma.permission.findMany({\n        where: {\n          code: {\n            in: data.permissions,\n          },\n        },\n      });\n\n      await this.prisma.rolePermission.createMany({\n        data: permissions.map((permission) => ({\n          roleId: role.id,\n          permissionId: permission.id,\n        })),\n      });\n    }\n\n    return this.getRoleWithPermissions(role.id);\n  }\n\n  async toggleRolePermission(\n    roleId: string,\n    permissionCode: string,\n    enabled: boolean,\n  ) {\n    const role = await this.prisma.role.findUnique({\n      where: { id: roleId },\n    });\n\n    if (!role) {\n      throw new NotFoundException('Role not found');\n    }\n\n    if (role.isSystem) {\n      throw new ForbiddenException('Cannot modify system roles');\n    }\n\n    const permission = await this.prisma.permission.findUnique({\n      where: { code: permissionCode },\n    });\n\n    if (!permission) {\n      throw new NotFoundException('Permission not found');\n    }\n\n    if (enabled) {\n      await this.prisma.rolePermission.create({\n        data: {\n          roleId,\n          permissionId: permission.id,\n        },\n      });\n    } else {\n      await this.prisma.rolePermission.deleteMany({\n        where: {\n          roleId,\n          permissionId: permission.id,\n        },\n      });\n    }\n\n    // Clear user permission cache for all users with this role\n    await this.clearPermissionCache(roleId);\n\n    return this.getRoleWithPermissions(roleId);\n  }\n\n  async updateRolePosition(roleId: string, newPosition: number) {\n    const roles = await this.prisma.role.findMany({\n      orderBy: { sortOrder: 'asc' },\n    });\n\n    const updates = roles.map((role, index) => {\n      let sortOrder = index;\n      if (role.id === roleId) {\n        sortOrder = newPosition;\n      } else if (index >= newPosition) {\n        sortOrder = index + 1;\n      }\n\n      return this.prisma.role.update({\n        where: { id: role.id },\n        data: { sortOrder },\n      });\n    });\n\n    await this.prisma.$transaction(updates);\n    return this.getRoles(true);\n  }\n\n  async assignRoleToUser(userId: string, roleId: string) {\n    const role = await this.prisma.role.findUnique({\n      where: { id: roleId },\n    });\n\n    if (!role) {\n      throw new NotFoundException('Role not found');\n    }\n\n    await this.prisma.personRole.create({\n      data: {\n        personId: userId,\n        roleId,\n      },\n    });\n\n    // Clear user's permission cache\n    await this.clearUserPermissionCache(userId);\n\n    return this.getUserRoles(userId);\n  }\n\n  async removeRoleFromUser(userId: string, roleId: string) {\n    await this.prisma.personRole.delete({\n      where: {\n        personId_roleId: {\n          personId: userId,\n          roleId,\n        },\n      },\n    });\n\n    // Clear user's permission cache\n    await this.clearUserPermissionCache(userId);\n\n    return this.getUserRoles(userId);\n  }\n\n  private async getNextRolePosition(): Promise {\n    const maxRole = await this.prisma.role.findFirst({\n      orderBy: { sortOrder: 'desc' },\n    });\n    return (maxRole?.sortOrder ?? -1) + 1;\n  }\n\n  private async clearPermissionCache(roleId: string) {\n    const usersWithRole = await this.prisma.personRole.findMany({\n      where: { roleId },\n    });\n\n    await Promise.all(\n      usersWithRole.map((ur) => this.clearUserPermissionCache(ur.personId)),\n    );\n  }\n\n  private async clearUserPermissionCache(userId: string) {\n    await this.cacheManager.del(`user-permissions:${userId}`);\n  }\n\n  async getUserRoles(userId: string) {\n    return this.prisma.person.findUnique({\n      where: { id: userId },\n      include: {\n        roles: {\n          include: {\n            role: {\n              include: {\n                permissions: {\n                  include: {\n                    permission: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Person.html":{"url":"classes/Person.html","title":"class - Person","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Person\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/person/entities/person.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accountStatus\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                isDeleted\n                            \n                            \n                                    Optional\n                                lastLoginAt\n                            \n                            \n                                    Optional\n                                nameAr\n                            \n                            \n                                    Optional\n                                nameEn\n                            \n                            \n                                    Optional\n                                passwordHash\n                            \n                            \n                                    Optional\n                                passwordResetToken\n                            \n                            \n                                    Optional\n                                passwordResetTokenExpiresAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accountStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastLoginAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nameAr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nameEn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        passwordHash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        passwordResetToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        passwordResetTokenExpiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/person/entities/person.entity.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Person {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  nameEn?: string;\n  nameAr?: string;\n  passwordHash?: string;\n  lastLoginAt?: Date;\n  accountStatus: string;\n  passwordResetToken?: string;\n  passwordResetTokenExpiresAt?: Date;\n  isDeleted: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PersonController.html":{"url":"controllers/PersonController.html","title":"controller - PersonController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PersonController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/person/person.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                people\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPersonDto: CreatePersonDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@RequirePermission('people.create')@ApiOperation({summary: 'Create a new person'})@ApiResponse({status: 201, type: Person})\n                \n            \n\n                    \n                        \n                            Defined in src/person/person.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPersonDto\n                                            \n                                                            CreatePersonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@RequirePermission('people.read')@ApiOperation({summary: 'Get all people'})@ApiResponse({status: 200, type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/person/person.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@RequirePermission('people.read')@ApiOperation({summary: 'Get a person by id'})@ApiResponse({status: 200, type: Person})@ApiResponse({status: 404, description: 'Person not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/person/person.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@RequirePermission('people.delete')@ApiOperation({summary: 'Soft delete a person'})@ApiResponse({status: 200, type: Person})@ApiResponse({status: 404, description: 'Person not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/person/person.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updatePersonDto: UpdatePersonDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@RequirePermission('people.update')@ApiOperation({summary: 'Update a person'})@ApiResponse({status: 200, type: Person})@ApiResponse({status: 404, description: 'Person not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/person/person.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePersonDto\n                                            \n                                                            UpdatePersonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { PersonService } from './person.service';\nimport { CreatePersonDto } from './dto/create-person.dto';\nimport { UpdatePersonDto } from './dto/update-person.dto';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../auth/guards/permission.guard';\nimport { RequirePermission } from '../rbac/decorators/require-permission.decorator';\nimport { Person } from './entities/person.entity';\n\n@ApiTags('people')\n@ApiBearerAuth()\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@Controller('people')\nexport class PersonController {\n  constructor(private readonly personService: PersonService) {}\n\n  @Post()\n  @RequirePermission('people.create')\n  @ApiOperation({ summary: 'Create a new person' })\n  @ApiResponse({ status: 201, type: Person })\n  create(@Body() createPersonDto: CreatePersonDto) {\n    return this.personService.create(createPersonDto);\n  }\n\n  @Get()\n  @RequirePermission('people.read')\n  @ApiOperation({ summary: 'Get all people' })\n  @ApiResponse({ status: 200, type: [Person] })\n  findAll() {\n    return this.personService.findAll();\n  }\n\n  @Get(':id')\n  @RequirePermission('people.read')\n  @ApiOperation({ summary: 'Get a person by id' })\n  @ApiResponse({ status: 200, type: Person })\n  @ApiResponse({ status: 404, description: 'Person not found' })\n  findOne(@Param('id') id: string) {\n    return this.personService.findOne(id);\n  }\n\n  @Patch(':id')\n  @RequirePermission('people.update')\n  @ApiOperation({ summary: 'Update a person' })\n  @ApiResponse({ status: 200, type: Person })\n  @ApiResponse({ status: 404, description: 'Person not found' })\n  update(@Param('id') id: string, @Body() updatePersonDto: UpdatePersonDto) {\n    return this.personService.update(id, updatePersonDto);\n  }\n\n  @Delete(':id')\n  @RequirePermission('people.delete')\n  @ApiOperation({ summary: 'Soft delete a person' })\n  @ApiResponse({ status: 200, type: Person })\n  @ApiResponse({ status: 404, description: 'Person not found' })\n  remove(@Param('id') id: string) {\n    return this.personService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PersonModule.html":{"url":"modules/PersonModule.html","title":"module - PersonModule","body":"\n                   \n\n\n\n\n    Modules\n    PersonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PersonModule\n\n\n\ncluster_PersonModule_imports\n\n\n\ncluster_PersonModule_exports\n\n\n\ncluster_PersonModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPersonModule\n\nPersonModule\n\nPersonModule -->\n\nPrismaModule->PersonModule\n\n\n\n\n\nRbacModule\n\nRbacModule\n\nPersonModule -->\n\nRbacModule->PersonModule\n\n\n\n\n\nPersonService \n\nPersonService \n\nPersonService  -->\n\nPersonModule->PersonService \n\n\n\n\n\nPersonService\n\nPersonService\n\nPersonModule -->\n\nPersonService->PersonModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/person/person.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PersonService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PersonController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            RbacModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PersonService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PersonService } from './person.service';\nimport { PersonController } from './person.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { RbacModule } from '../rbac/rbac.module';\n\n@Module({\n  imports: [PrismaModule, RbacModule],\n  controllers: [PersonController],\n  providers: [PersonService],\n  exports: [PersonService],\n})\nexport class PersonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersonService.html":{"url":"injectables/PersonService.html","title":"injectable - PersonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PersonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/person/person.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/person/person.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPersonDto: CreatePersonDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/person/person.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPersonDto\n                                            \n                                                            CreatePersonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/person/person.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/person/person.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/person/person.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updatePersonDto: UpdatePersonDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/person/person.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePersonDto\n                                            \n                                                            UpdatePersonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { CreatePersonDto } from './dto/create-person.dto';\nimport { UpdatePersonDto } from './dto/update-person.dto';\n\n@Injectable()\nexport class PersonService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(createPersonDto: CreatePersonDto) {\n    return this.prisma.person.create({\n      data: createPersonDto,\n    });\n  }\n\n  async findAll() {\n    return this.prisma.person.findMany({\n      where: {\n        isDeleted: false,\n      },\n    });\n  }\n\n  async findOne(id: string) {\n    const person = await this.prisma.person.findFirst({\n      where: {\n        id,\n        isDeleted: false,\n      },\n      include: {\n        emails: true,\n        phones: true,\n        roles: {\n          include: {\n            role: true,\n          },\n        },\n      },\n    });\n\n    if (!person) {\n      throw new NotFoundException(`Person with ID ${id} not found`);\n    }\n\n    return person;\n  }\n\n  async update(id: string, updatePersonDto: UpdatePersonDto) {\n    await this.findOne(id);\n\n    return this.prisma.person.update({\n      where: { id },\n      data: updatePersonDto,\n    });\n  }\n\n  async remove(id: string) {\n    await this.findOne(id);\n\n    return this.prisma.person.update({\n      where: { id },\n      data: {\n        isDeleted: true,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RbacModule.html":{"url":"modules/RbacModule.html","title":"module - RbacModule","body":"\n                   \n\n\n\n\n    Modules\n    RbacModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RbacModule\n\n\n\ncluster_RbacModule_providers\n\n\n\ncluster_RbacModule_imports\n\n\n\ncluster_RbacModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nRbacModule\n\nRbacModule\n\nRbacModule -->\n\nPrismaModule->RbacModule\n\n\n\n\n\nPermissionDiscoveryService \n\nPermissionDiscoveryService \n\nPermissionDiscoveryService  -->\n\nRbacModule->PermissionDiscoveryService \n\n\n\n\n\nPermissionGuard \n\nPermissionGuard \n\nPermissionGuard  -->\n\nRbacModule->PermissionGuard \n\n\n\n\n\nPermissionManagementService \n\nPermissionManagementService \n\nPermissionManagementService  -->\n\nRbacModule->PermissionManagementService \n\n\n\n\n\nPermissionDiscoveryService\n\nPermissionDiscoveryService\n\nRbacModule -->\n\nPermissionDiscoveryService->RbacModule\n\n\n\n\n\nPermissionManagementService\n\nPermissionManagementService\n\nRbacModule -->\n\nPermissionManagementService->RbacModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/rbac/rbac.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PermissionDiscoveryService\n                        \n                        \n                            PermissionManagementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PermissionManagementController\n                        \n                        \n                            RoleManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PermissionDiscoveryService\n                        \n                        \n                            PermissionGuard\n                        \n                        \n                            PermissionManagementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DiscoveryModule } from '@nestjs/core';\nimport { PermissionDiscoveryService } from './services/permission-discovery.service';\nimport { PermissionManagementService } from './services/permission-management.service';\nimport { PermissionGuard } from './guards/permission.guard';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { PermissionManagementController } from './controllers/permission-management.controller';\nimport { RoleManagementController } from './controllers/role-management.controller';\n\n@Module({\n  imports: [\n    DiscoveryModule,\n    PrismaModule,\n    CacheModule.register({\n      ttl: 300, // 5 minutes\n    }),\n  ],\n  controllers: [PermissionManagementController, RoleManagementController],\n  providers: [\n    PermissionDiscoveryService,\n    PermissionManagementService,\n    PermissionGuard,\n  ],\n  exports: [\n    PermissionDiscoveryService,\n    PermissionManagementService,\n    PermissionGuard,\n  ],\n})\nexport class RbacModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisCacheModule.html":{"url":"modules/RedisCacheModule.html","title":"module - RedisCacheModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisCacheModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cache/redis-cache.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { redisStore } from 'cache-manager-redis-store';\nimport type { RedisClientOptions } from 'redis';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        store: redisStore as any,\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        password: configService.get('REDIS_PASSWORD'),\n        ttl: configService.get('REDIS_TTL'),\n        max: configService.get('REDIS_MAX_MEMORY'),\n        isGlobal: true,\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [CacheModule],\n})\nexport class RedisCacheModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisHealthIndicator.html":{"url":"injectables/RedisHealthIndicator.html","title":"injectable - RedisHealthIndicator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisHealthIndicator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/redis.health.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HealthIndicator\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/health/redis.health.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkHealth(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/redis.health.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  HealthIndicator,\n  HealthIndicatorResult,\n  HealthCheckError,\n} from '@nestjs/terminus';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Inject } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\n\n@Injectable()\nexport class RedisHealthIndicator extends HealthIndicator {\n  constructor(@Inject(CACHE_MANAGER) private readonly cacheManager: Cache) {\n    super();\n  }\n\n  async checkHealth(key: string): Promise {\n    try {\n      const testKey = `health:${key}`;\n      await this.cacheManager.set(testKey, 'health-check', 10);\n      const value = await this.cacheManager.get(testKey);\n      await this.cacheManager.del(testKey);\n\n      const isHealthy = value === 'health-check';\n\n      return this.getStatus(key, isHealthy);\n    } catch (error) {\n      throw new HealthCheckError(\n        'Redis health check failed',\n        this.getStatus(key, false, { error: error.message }),\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refresh_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token for generating new access token'})@IsString()@IsNotEmpty({message: 'Refresh token is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'Refresh token for generating new access token',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Refresh token is required' })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                nameAr\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                nameEn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com', description: 'User email address'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        nameAr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'جون دو', description: 'User name in Arabic', required: false})@IsOptional()@IsString()@MinLength(2, {message: 'Name must be at least 2 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        nameEn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe', description: 'User name in English', required: false})@IsOptional()@IsString()@MinLength(2, {message: 'Name must be at least 2 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', description: 'User password'})@IsString()@MinLength(8, {message: 'Password must be at least 8 characters long'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {message: 'Password must contain at least one uppercase letter, one lowercase letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  MinLength,\n  IsOptional,\n  Matches,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RegisterDto {\n  @ApiProperty({\n    example: 'user@example.com',\n    description: 'User email address',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    example: 'password123',\n    description: 'User password',\n  })\n  @IsString()\n  @MinLength(8, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain at least one uppercase letter, one lowercase letter, one number and one special character',\n  })\n  password: string;\n\n  @ApiProperty({\n    example: 'John Doe',\n    description: 'User name in English',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  @MinLength(2, { message: 'Name must be at least 2 characters long' })\n  nameEn?: string;\n\n  @ApiProperty({\n    example: 'جون دو',\n    description: 'User name in Arabic',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  @MinLength(2, { message: 'Name must be at least 2 characters long' })\n  nameAr?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleManagementController.html":{"url":"controllers/RoleManagementController.html","title":"controller - RoleManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rbac/controllers/role-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                assignRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getRoles\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                removeRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                togglePermissions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updatePosition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        assignRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRole(userId: string, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('users/:userId/roles')@ApiOperation({summary: 'Assign role to user'})@RequirePermission('roles.assign')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/role-management.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRole(data: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new role'})@RequirePermission('roles.create')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/role-management.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoles()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all roles with their permissions'})@RequirePermission('roles.read')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/role-management.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        removeRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRole(userId: string, roleId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('users/:userId/roles/:roleId')@ApiOperation({summary: 'Remove role from user'})@RequirePermission('roles.assign')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/role-management.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        togglePermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    togglePermissions(roleId: string, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':roleId/permissions')@ApiOperation({summary: 'Toggle permissions for a role'})@RequirePermission('roles.update')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/role-management.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updatePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePosition(roleId: string, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':roleId/position')@ApiOperation({summary: 'Update role position (for drag-and-drop)'})@RequirePermission('roles.update')\n                \n            \n\n                    \n                        \n                            Defined in src/rbac/controllers/role-management.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Delete,\n  Body,\n  Param,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../guards/permission.guard';\nimport { RequirePermission } from '../decorators/require-permission.decorator';\nimport { PermissionManagementService } from '../services/permission-management.service';\nimport { CreateRoleDto } from '../dto/create-role.dto';\n\n@ApiTags('Role Management')\n@Controller('roles')\n@UseGuards(JwtAuthGuard, PermissionGuard)\nexport class RoleManagementController {\n  constructor(private permissionService: PermissionManagementService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get all roles with their permissions' })\n  @RequirePermission('roles.read')\n  async getRoles() {\n    return this.permissionService.getRoles(true);\n  }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new role' })\n  @RequirePermission('roles.create')\n  async createRole(@Body() data: CreateRoleDto) {\n    return this.permissionService.createRole(data);\n  }\n\n  @Patch(':roleId/permissions')\n  @ApiOperation({ summary: 'Toggle permissions for a role' })\n  @RequirePermission('roles.update')\n  async togglePermissions(\n    @Param('roleId') roleId: string,\n    @Body()\n    data: {\n      permissionCode: string;\n      enabled: boolean;\n    },\n  ) {\n    return this.permissionService.toggleRolePermission(\n      roleId,\n      data.permissionCode,\n      data.enabled,\n    );\n  }\n\n  @Patch(':roleId/position')\n  @ApiOperation({ summary: 'Update role position (for drag-and-drop)' })\n  @RequirePermission('roles.update')\n  async updatePosition(\n    @Param('roleId') roleId: string,\n    @Body() data: { position: number },\n  ) {\n    return this.permissionService.updateRolePosition(roleId, data.position);\n  }\n\n  @Post('users/:userId/roles')\n  @ApiOperation({ summary: 'Assign role to user' })\n  @RequirePermission('roles.assign')\n  async assignRole(\n    @Param('userId') userId: string,\n    @Body() data: { roleId: string },\n  ) {\n    return this.permissionService.assignRoleToUser(userId, data.roleId);\n  }\n\n  @Delete('users/:userId/roles/:roleId')\n  @ApiOperation({ summary: 'Remove role from user' })\n  @RequirePermission('roles.assign')\n  async removeRole(\n    @Param('userId') userId: string,\n    @Param('roleId') roleId: string,\n  ) {\n    return this.permissionService.removeRoleFromUser(userId, roleId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePersonDto.html":{"url":"classes/UpdatePersonDto.html","title":"class - UpdatePersonDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePersonDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/person/dto/update-person.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(\n  OmitType(CreatePersonDto, ['passwordHash'] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\nimport { CreatePersonDto } from './create-person.dto';\n\nexport class UpdatePersonDto extends PartialType(\n  OmitType(CreatePersonDto, ['passwordHash'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyEmailDto.html":{"url":"classes/VerifyEmailDto.html","title":"class - VerifyEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/verify-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123456', description: 'Verification code sent to email'})@IsString()@Length(6, 6, {message: 'Verification code must be exactly 6 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/verify-email.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com', description: 'Email address to verify'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/verify-email.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class VerifyEmailDto {\n  @ApiProperty({\n    example: 'user@example.com',\n    description: 'Email address to verify',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    example: '123456',\n    description: 'Verification code sent to email',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'Verification code must be exactly 6 characters' })\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                21 %\n                (3/14)\n            \n        \n        \n            \n                \n                        src/auth/decorators/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/permissions.decorator.ts\n            \n            variable\n            RequirePermissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/verify-email.dto.ts\n            \n            class\n            VerifyEmailDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/permission.guard.ts\n            \n            guard\n            PermissionGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/redis.health.ts\n            \n            injectable\n            RedisHealthIndicator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/person/dto/create-person.dto.ts\n            \n            class\n            CreatePersonDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/person/dto/update-person.dto.ts\n            \n            class\n            UpdatePersonDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/person/entities/person.entity.ts\n            \n            class\n            Person\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/person/person.controller.ts\n            \n            controller\n            PersonController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/person/person.service.ts\n            \n            injectable\n            PersonService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/rbac/controllers/permission-management.controller.ts\n            \n            controller\n            PermissionManagementController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/rbac/controllers/role-management.controller.ts\n            \n            controller\n            RoleManagementController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/rbac/decorators/require-permission.decorator.ts\n            \n            variable\n            PERMISSION_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/rbac/decorators/require-permission.decorator.ts\n            \n            variable\n            RequirePermission\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/rbac/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/rbac/guards/permission.guard.ts\n            \n            guard\n            PermissionGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/rbac/services/permission-discovery.service.ts\n            \n            injectable\n            PermissionDiscoveryService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/rbac/services/permission-management.service.ts\n            \n            injectable\n            PermissionManagementService\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                        src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/add-permission.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/add-permission.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/add-permission.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/add-permission.ts\n            \n            variable\n            category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/add-permission.ts\n            \n            variable\n            code\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/add-permission.ts\n            \n            variable\n            description\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/add-permission.ts\n            \n            variable\n            name\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/audit-permissions.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/create-admin.ts\n            \n            function\n            createAdmin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/create-admin.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/scripts/list-permissions.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cache-manager : ^2.3.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/schedule : ^4.1.2\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @prisma/client : ^6.1.0\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/cache-manager-redis-store : ^2.0.4\n        \n            @types/ms : ^0.7.34\n        \n            @types/passport-jwt : ^4.0.1\n        \n            bcrypt : ^5.1.1\n        \n            cache-manager : ^5.7.6\n        \n            cache-manager-redis-store : ^3.0.1\n        \n            chalk : ^4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            decimal.js : ^10.4.3\n        \n            ioredis : ^5.4.1\n        \n            ms : ^2.1.3\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            prompts : ^2.4.2\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            uuid : ^11.0.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../repl.ts)\n                        \n                        \n                            bootstrap   (src/.../add-permission.ts)\n                        \n                        \n                            bootstrap   (src/.../audit-permissions.ts)\n                        \n                        \n                            bootstrap   (src/.../list-permissions.ts)\n                        \n                        \n                            createAdmin   (src/.../create-admin.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/scripts/add-permission.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/scripts/audit-permissions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/scripts/list-permissions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/scripts/create-admin.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createAdmin\n                        \n                    \n                \n            \n            \n                \ncreateAdmin()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBAWES ERP System\nOverview\nBAWES ERP is a comprehensive enterprise resource planning system built with NestJS, designed to handle business operations including banking, accounting, and workflow management.\nGetting Started\nSee our Getting Started Guide for detailed setup instructions.\nQuick start for existing users:\nExample :# Clone the repository\ngit clone https://github.com/plugnio/BAWES-ERP.git\ncd BAWES-ERP\n\n# Open in VS Code\ncode .\n\n# Click \"Reopen in Container\" when promptedCore Features\n\n🏦 Banking Integration\n🔐 Centralized Authentication\n💼 Multi-currency Support\n📊 Financial Reporting\n🔄 Workflow Management\n\nDocumentation Structure\nDevelopment\n\nGetting Started Guide - Start here\nDevelopment Standards - Coding guidelines\nTesting Guide - Testing practices\n\nAPI & SDK\n\nAPI Documentation - API endpoints and usage\nSDK Guide - SDK integration\n\nCore Concepts\n\nArchitecture - System design\nSecurity - Security practices\nBanking Integration - Banking setup\n\nFor full documentation, see our Documentation Hub.\nContributing\n\nCreate a feature branch (git checkout -b feature/name)\nMake your changes\nPush to the branch (git push origin feature/name)\nCreate a Pull Request\n\nLicense\nProprietary - All rights reserved\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PersonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RbacModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisCacheModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PersonModule\n\n\n\ncluster_PersonModule_exports\n\n\n\ncluster_PersonModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_RbacModule\n\n\n\ncluster_RbacModule_exports\n\n\n\ncluster_RbacModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nPersonModule\n\nPersonModule\n\nAppModule -->\n\nPersonModule->AppModule\n\n\n\n\n\nPersonService \n\nPersonService \n\nPersonService  -->\n\nPersonModule->PersonService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nPersonModule -->\n\nPrismaModule->PersonModule\n\n\n\n\n\nRbacModule\n\nRbacModule\n\nRbacModule -->\n\nPrismaModule->RbacModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nPersonModule -->\n\nRbacModule->PersonModule\n\n\n\nAppModule -->\n\nRbacModule->AppModule\n\n\n\n\n\nPermissionDiscoveryService \n\nPermissionDiscoveryService \n\nPermissionDiscoveryService  -->\n\nRbacModule->PermissionDiscoveryService \n\n\n\n\n\nPermissionGuard \n\nPermissionGuard \n\nPermissionGuard  -->\n\nRbacModule->PermissionGuard \n\n\n\n\n\nPermissionManagementService \n\nPermissionManagementService \n\nPermissionManagementService  -->\n\nRbacModule->PermissionManagementService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPersonService\n\nPersonService\n\nPersonModule -->\n\nPersonService->PersonModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nPermissionDiscoveryService\n\nPermissionDiscoveryService\n\nRbacModule -->\n\nPermissionDiscoveryService->RbacModule\n\n\n\n\n\nPermissionManagementService\n\nPermissionManagementService\n\nRbacModule -->\n\nPermissionManagementService->RbacModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : BAWES ERP Backend\n        \n            License : UNLICENSED\n        \n            Repository : git+https://github.com/bawes/erp.git\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                               (src/.../add-permission.ts)\n                        \n                        \n                               (src/.../add-permission.ts)\n                        \n                        \n                            category   (src/.../add-permission.ts)\n                        \n                        \n                            code   (src/.../add-permission.ts)\n                        \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            description   (src/.../add-permission.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            name   (src/.../add-permission.ts)\n                        \n                        \n                            PERMISSION_KEY   (src/.../require-permission.decorator.ts)\n                        \n                        \n                            prisma   (src/.../create-admin.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RequirePermission   (src/.../require-permission.decorator.ts)\n                        \n                        \n                            RequirePermissions   (src/.../permissions.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/scripts/add-permission.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n\n\n        \n    \n\n    src/auth/decorators/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/rbac/decorators/require-permission.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PERMISSION_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'permission'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequirePermission\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (permission: string) =>\n  SetMetadata(PERMISSION_KEY, permission)\n                    \n                \n\n\n        \n    \n\n    src/scripts/create-admin.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/permissions.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RequirePermissions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...permissions: string[]) =>\n  SetMetadata('permissions', permissions)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
