name: Update SDK

on:
  push:
    branches:
      - main
    paths:
      - 'swagger.json'
      - 'src/**/*.ts'
  workflow_dispatch:

jobs:
  check-breaking-changes:
    runs-on: ubuntu-latest
    outputs:
      has_breaking: ${{ steps.check-breaking.outputs.has_breaking }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Check for breaking changes
        id: check-breaking
        run: |
          CHANGES=$(npm run check:breaking-changes)
          echo "has_breaking=$(echo $CHANGES | grep -c "BREAKING" || true)" >> $GITHUB_OUTPUT
          echo "$CHANGES" > breaking-changes.txt

      - name: Create Issue for Breaking Changes
        if: steps.check-breaking.outputs.has_breaking != '0'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const changes = fs.readFileSync('breaking-changes.txt', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚠️ Breaking Changes Detected in API',
              body: `Breaking changes detected in the API:\n\n\`\`\`\n${changes}\n\`\`\`\n\nPlease review and update the major version number if proceeding with these changes.`,
              labels: ['breaking-change']
            });

  update-sdk:
    needs: check-breaking-changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SDK_DEPLOY_KEY }}

      - name: Generate and update SDK
        run: |
          # Generate the SDK
          npm run generate:sdk
          
          # Debug: Check what was generated
          ls -la tmp-sdk
          
          # Update SDK
          node scripts/update-sdk.js
          
          # Build the SDK
          cd sdk-repo
          
          # Clean up any existing generated files in root
          rm -f api.ts base.ts common.ts configuration.ts index.ts git_push.sh
          
          # Ensure src directory exists
          mkdir -p src
          
          # Move all TypeScript files to src/
          mv ../tmp-sdk/*.ts src/
          
          # Build the SDK
          npm run build
          
          # Get current version
          CURRENT_VERSION=$(npm pkg get version | tr -d '"')
          
          # Function to increment version
          increment_version() {
            local version=$1
            local major=$(echo $version | cut -d. -f1)
            local minor=$(echo $version | cut -d. -f2)
            local patch=$(echo $version | cut -d. -f3)
            
            if [ "$2" = "major" ]; then
              echo "$((major + 1)).0.0"
            else
              echo "$major.$((minor + 1)).0"
            fi
          }
          
          # Determine and set new version
          if [ "${{ needs.check-breaking-changes.outputs.has_breaking }}" != "0" ]; then
            NEW_VERSION=$(increment_version $CURRENT_VERSION "major")
          else
            NEW_VERSION=$(increment_version $CURRENT_VERSION "minor")
          fi
          
          # Update package.json version
          npm version $NEW_VERSION --no-git-tag-version
          
          # Update CHANGELOG.md
          echo "## [$NEW_VERSION] - $(date +'%Y-%m-%d')" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          if [ "${{ needs.check-breaking-changes.outputs.has_breaking }}" != "0" ]; then
            echo "### Breaking Changes" >> CHANGELOG.md
            cat ../breaking-changes.txt >> CHANGELOG.md
          else
            echo "### Changes" >> CHANGELOG.md
            echo "- Updated SDK based on latest API changes" >> CHANGELOG.md
          fi
          echo "" >> CHANGELOG.md
          cat CHANGELOG.md.tmp >> CHANGELOG.md
          
          # Commit changes
          git add .
          git commit -m "chore: update SDK to version $NEW_VERSION"
          
          # Create and push tag if it doesn't exist
          if ! git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
            git tag -a "v$NEW_VERSION" -m "$NEW_VERSION"
          fi
          
          # Push changes and tags
          git push --follow-tags
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"