name: Update SDK

on:
  push:
    paths:
      - 'swagger.json'
      - 'src/**/*.ts'
  workflow_dispatch: {}
  schedule:
    # Run cleanup every Sunday at midnight
    - cron: '0 0 * * 0'

jobs:
  update-sdk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SDK_DEPLOY_KEY }}

      - name: Generate and update SDK
        run: |
          # Debug information
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Ref Name: ${{ github.ref_name }}"
          echo "GitHub Event Name: ${{ github.event_name }}"
          
          # Generate the SDK
          npm run generate:sdk
          
          # Get branch name from git ref
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Using branch name: ${BRANCH_NAME}"
          
          # Clone SDK repo
          git clone git@github.com:plugnio/BAWES-ERP-sdk.git sdk-repo
          cd sdk-repo
          
          # Fetch all branches
          git fetch origin
          
          # Create or switch to branch with error handling
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "Checking out existing branch: ${BRANCH_NAME}"
            git checkout $BRANCH_NAME || {
              echo "Failed to checkout existing branch, creating new one"
              git checkout -b $BRANCH_NAME
            }
          else
            echo "Creating new branch: ${BRANCH_NAME}"
            git checkout -b $BRANCH_NAME
          fi
          
          # Clean existing files
          rm -rf src/
          mkdir -p src
          
          # Copy new files
          cp -v ../tmp-sdk/*.ts src/
          
          # Initialize package.json if it doesn't exist
          if [ ! -f package.json ]; then
            npm init -y
          fi
          
          # Install dependencies
          npm install typescript @types/node --save-dev
          
          # Build SDK
          npm run build || npx tsc --noEmit
          
          # Check for changes
          if [[ -n "$(git status --porcelain)" ]]; then
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            
            if [ "$BRANCH_NAME" = "main" ]; then
              # For main branch, increment minor version
              CURRENT_VERSION=$(npm pkg get version | tr -d '"')
              MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
              MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            else
              # For feature branches, use timestamp version
              NEW_VERSION="0.0.0-${BRANCH_NAME}-${TIMESTAMP}"
            fi
            
            # Update package.json version
            npm version $NEW_VERSION --no-git-tag-version --allow-same-version
            
            # Update CHANGELOG.md for all branches
            if [ ! -f CHANGELOG.md ]; then
              echo "# Changelog\n" > CHANGELOG.md
            fi
            
            # Get commit messages since last update
            CHANGES=$(cd .. && git log --pretty=format:"- %s" -n 5)
            
            # Update changelog
            echo -e "## [$NEW_VERSION] - $(date +'%Y-%m-%d')\n" > CHANGELOG.tmp
            echo -e "### Changes\n$CHANGES\n\n" >> CHANGELOG.tmp
            cat CHANGELOG.md >> CHANGELOG.tmp
            mv CHANGELOG.tmp CHANGELOG.md
            
            # Commit and push changes
            git add .
            git commit -m "feat(sdk): Update SDK to version $NEW_VERSION"
            
            if [ "$BRANCH_NAME" = "main" ]; then
              git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION"
              git push --follow-tags || {
                echo "Failed to push to main branch"
                exit 1
              }
            else
              git push -u origin $BRANCH_NAME --force || {
                git push --set-upstream origin $BRANCH_NAME --force
              }
            fi
            
            echo "SDK updated on branch: $BRANCH_NAME with version: $NEW_VERSION"
          else
            echo "No changes detected in SDK files"
          fi
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"

  cleanup-sdk-branches:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SDK_DEPLOY_KEY }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Cleanup stale SDK branches
        run: |
          # Clone SDK repo
          git clone git@github.com:plugnio/BAWES-ERP-sdk.git sdk-repo
          cd sdk-repo
          
          # Get list of all remote branches except main
          BRANCHES=$(git branch -r | grep -v 'main' | sed 's/origin\///')
          
          # Get list of branches from main repo that are still active
          ACTIVE_BRANCHES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/branches" | \
            jq -r '.[].name')
          
          for branch in $BRANCHES; do
            if ! echo "$ACTIVE_BRANCHES" | grep -q "^${branch}$"; then
              LAST_COMMIT=$(git log -1 --format=%ct origin/$branch)
              CURRENT_TIME=$(date +%s)
              DAYS_OLD=$(( ($CURRENT_TIME - $LAST_COMMIT) / 86400 ))
              
              if [ $DAYS_OLD -gt 30 ]; then
                git push origin --delete $branch
                echo "Deleted branch $branch (${DAYS_OLD} days old)"
              fi
            fi
          done
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"