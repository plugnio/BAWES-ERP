generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: 
// - Connect bank to country, for transfers to India etc.
// - Add account number and iban to account?
// - Orgs ability to have multiple orgs, people being part of multiple orgs, 
//  and what happens if a perosn is part of a parent org and a child org.
// - Relationship between people and country for nationality and currently living in
// - Relationship between bank and country?
// - Relationship between person and organization
// - Consider org relation with accounts for accounting
// - Auth for person and organization, with RBAC implementation via JWT.

model Organization {
  /// Unique identifier for the organization
  id        String   @id @default(cuid())
  /// Date and time when the organization was created
  createdAt DateTime @default(now())
  /// Date and time when the organization was last updated
  updatedAt DateTime @updatedAt
  /// English name of the organization
  nameEn    String
  /// Arabic name of the organization
  nameAr    String
  /// Indicates whether the organization is deleted (soft delete)
  isDeleted Boolean  @default(false)

  /// Relation to the organization emails
  emails Email[]
  /// Relation to the organization phones
  phones Phone[]

  // Map the model to the database table
  @@map("organization")
}

/// Person model
model Person {
  /// Unique identifier for the person
  id                          String    @id @default(cuid())
  /// Date and time when the person was created
  createdAt                   DateTime  @default(now())
  /// Date and time when the person was last updated
  updatedAt                   DateTime  @updatedAt
  /// English name of the person
  nameEn                      String?
  /// Arabic name of the person
  nameAr                      String?
  /// Hashed password for authentication
  passwordHash                String?
  /// Last login timestamp
  lastLoginAt                 DateTime?
  /// Account status (active, suspended, locked, etc.)
  accountStatus               String    @default("active")
  /// Password reset token
  passwordResetToken          String?
  /// Password reset token expiry
  passwordResetTokenExpiresAt DateTime?
  /// Indicates whether the person is deleted (soft delete)
  isDeleted                   Boolean   @default(false)

  /// Relation to the person emails
  emails       Email[]
  /// Relation to the person phones
  phones       Phone[]
  RefreshToken RefreshToken[]

  /// Relation to person roles
  roles        PersonRole[]

  // Map the model to the database table
  @@map("person")
}

/// Person email model, a person/organization can have many emails. An email can be associated with a person/organization or not.
model Email {
  /// Unique identifier for the person email
  id                        String    @id @default(cuid())
  /// Date and time when the email was created
  createdAt                 DateTime  @default(now())
  /// Date and time when the email was last updated
  updatedAt                 DateTime  @updatedAt
  /// Email address of the person
  email                     String    @unique
  /// Indicates whether the email is the primary email of the person
  isPrimary                 Boolean   @default(false)
  /// Is the email verified
  isVerified                Boolean   @default(false)
  /// Verification code for email
  verificationCode          String?
  /// When the verification code expires
  verificationCodeExpiresAt DateTime?

  /// Unique identifier for the person
  personId       String?
  /// Unique identifier for the organization
  organizationId String?

  /// Relation to the person
  person       Person?       @relation(fields: [personId], references: [id])
  /// Relation to the organization
  organization Organization? @relation(fields: [organizationId], references: [id])

  // Map the model to the database table
  @@map("email")
}

/// Phone model, a phone can be associated with a person or organization.
model Phone {
  /// Unique identifier for the person phone
  id                        String    @id @default(cuid())
  /// Date and time when the phone was created
  createdAt                 DateTime  @default(now())
  /// Date and time when the phone was last updated
  updatedAt                 DateTime  @updatedAt
  /// Phone number of the person
  phone                     String
  /// Raw phone number without country code (e.g., "5555555")
  phoneNumber               String
  /// E164 formatted phone number with country code (e.g., "+16505555555")
  e164Number                String
  /// Formatted phone number for display (e.g., "(650) 555-5555")
  formattedNumber           String
  /// Is the phone number verified
  isVerified                Boolean   @default(false)
  /// Verification code for phone number
  verificationCode          String?
  /// When the verification code expires
  verificationCodeExpiresAt DateTime?
  /// Indicates whether the phone is the primary phone of the person
  isPrimary                 Boolean   @default(false)

  /// Unique identifier for the person
  personId       String?
  /// Unique identifier for the organization
  organizationId String?
  /// Country ID for the phone number
  countryId      String

  /// Relation to the country
  country      Country       @relation(fields: [countryId], references: [id])
  /// Relation to the person
  person       Person?       @relation(fields: [personId], references: [id])
  /// Relation to the organization
  organization Organization? @relation(fields: [organizationId], references: [id])

  /// Ensure phone numbers are unique within a country
  @@unique([countryId, phoneNumber])
  // Map the model to the database table
  @@map("phone")
}

/// Account model for bank accounts
model Account {
  /// Unique identifier for the account
  id                String   @id @default(cuid())
  /// Date and time when the account was created
  createdAt         DateTime @default(now())
  /// Date and time when the account was last updated
  updatedAt         DateTime @updatedAt
  /// Type of the account (savings, checking, credit card, debit card, etc.)
  type              String
  /// Name of the account as per issuer (Eg: BAWES FOR COMPUTER AND OPERATION COMPANY)
  nameAsPerIssuer   String
  /// Account or credit card number as per issuer (Eg: 0603022881002)
  numberAsPerIssuer String
  /// IBAN of the account (if exists)
  iban              String?
  /// Label of the account, used for display and identification. optional (ie: BAWES01: For Plugn)
  label             String?
  /// Status of the account (active, inactive, closed, etc.)
  status            String
  /// Currency of the account
  currency          String
  /// Balance of the account
  balance           Decimal
  /// Indicates whether the account is deleted (soft delete)
  isDeleted         Boolean  @default(false)

  /// Optional reference to the associated bank
  bankId String?

  /// Optional relation to the bank
  bank            Bank?             @relation(fields: [bankId], references: [id])
  /// Account balances relation
  AccountBalances AccountBalances[]

  // Map the model to the database table
  @@map("account")
}

/// Account balances model, used to store the balance of an account at a specific time when scraping from bank records
model AccountBalances {
  /// Unique identifier for the account balance
  id        String   @id @default(cuid())
  /// Date and time when the account balance was created
  createdAt DateTime @default(now())
  /// Balance of the account
  balance   Decimal
  /// Source of the account balance (eg: bank statement, bank API, scraper, etc.)
  source    String

  /// Account ID
  accountId String

  /// Account Relation
  account Account @relation(fields: [accountId], references: [id])

  // Map the model to the database table
  @@map("account_balances")
}

/// Bank model
model Bank {
  /// Unique identifier for the bank
  id             String   @id @default(cuid())
  /// Date and time when the bank was created
  createdAt      DateTime @default(now())
  /// Date and time when the bank was last updated
  updatedAt      DateTime @updatedAt
  /// English name of the bank
  nameEn         String
  /// Arabic name of the bank
  nameAr         String
  /// IBAN (International Bank Account Number) code prefix of the bank
  ibanCode       String   @unique
  /// SWIFT (Society for Worldwide Interbank Financial Telecommunication) code of the bank
  swiftCode      String
  /// Abbreviated code for the bank (internal usage for ABK system)
  codeAbk        Int?
  /// Address of the bank (headquarters or branch)
  address        String
  /// Name of the branch (if exists)
  branchName     String?
  /// State of the bank (if exists)
  state          String?
  /// City of the bank (if exists)
  city           String?
  /// Postcode of the bank (if exists)
  postcode       String?
  /// Type of transfer the bank supports (e.g., LCL, TRF)
  transferType   String?
  /// Additional information about the bank
  additionalInfo Json? // Example: { "ifscCode": "ICIC0003990", "mmid": "9229333" }
  /// Indicates whether the record is deleted (soft delete)
  isDeleted      Boolean  @default(false)

  /// Relation to country, which country is this bank in?
  countryId String

  /// Relation to country
  country  Country   @relation(fields: [countryId], references: [id])
  /// Relation to accounts
  accounts Account[]

  // Map the model to the database table
  @@map("bank")
}

/// Country model to handle country-specific data
model Country {
  /// Unique identifier for the country
  id             String  @id @default(cuid())
  /// ISO 3166-1 alpha-2 code (e.g., US, GB, SA)
  code           String  @unique
  /// English name of the country
  nameEn         String
  /// Arabic name of the country
  nameAr         String
  /// Phone country code (e.g., +1, +44, +966)
  phoneCode      String
  /// ISO 4217 currency code (e.g., USD, GBP, SAR)
  currencyCode   String
  /// Currency symbol (e.g., $, £, ﷼)
  currencySymbol String
  /// Indicates whether the country is deleted (soft delete)
  isDeleted      Boolean @default(false)

  /// Relation to banks in this country
  banks  Bank[]
  /// Relation to phones in this country
  phones Phone[]

  // Map the model to the database table
  @@map("country")
}

/// Refresh token model for handling session persistence and token rotation
model RefreshToken {
  /// Unique identifier for the refresh token
  id            String    @id @default(cuid())
  /// Reference to the person who owns this token
  personId      String
  /// Hashed version of the refresh token for secure storage
  hashedToken   String    
  /// User agent string of the device that created the token
  deviceDetails String?   
  /// IP address from which the token was created/last used (for audit only)
  ipAddress     String    
  /// When this token expires
  expiresAt     DateTime
  /// Whether this token has been revoked
  isRevoked     Boolean   @default(false)
  /// Reason for revocation if the token was revoked
  revokedReason String?   
  /// Last time this token was used to obtain a new access token
  lastUsedAt    DateTime  @default(now())
  /// Date and time when the token was created
  createdAt     DateTime  @default(now())
  /// Date and time when the token was last updated
  updatedAt     DateTime  @updatedAt
  /// Reference to the person model
  person        Person    @relation(fields: [personId], references: [id])

  @@index([personId])
  @@index([expiresAt])
  @@index([hashedToken])

  // Map the model to the database table
  @@map("refresh_token")
}

/// Permission Category model to group permissions
model PermissionCategory {
  /// Unique identifier for the category
  id          String   @id @default(cuid())
  /// Name of the category (e.g., "User Management", "Content Management")
  name        String   @unique
  /// Description of the category
  description String?
  /// Sort order for display
  sortOrder   Int      @default(0)

  /// Relations
  permissions Permission[]

  @@map("permission_category")
}

/// Permission model for dynamic permission management
model Permission {
  /// Unique identifier for the permission
  id          String   @id @default(cuid())
  /// Unique code for the permission (e.g., "users.create")
  code        String   @unique
  /// Name of the permission
  name        String
  /// Description of what the permission allows
  description String?
  /// Bitfield value for the permission
  bitfield    BigInt   @unique
  
  /// Category ID
  categoryId  String
  /// Category relation
  category    PermissionCategory @relation(fields: [categoryId], references: [id])

  /// Relations
  roles       RolePermission[]

  @@map("permission")
}

/// Role model for dynamic role management
model Role {
  /// Unique identifier for the role
  id          String   @id @default(cuid())
  /// Name of the role
  name        String   @unique
  /// Description of the role
  description String?
  /// Is this a system role that cannot be modified/deleted
  isSystem    Boolean  @default(false)
  /// Sort order for display
  sortOrder   Int      @default(0)

  /// Relations
  permissions RolePermission[]
  users       PersonRole[]

  @@map("role")
}

/// Junction table for Role-Permission many-to-many relationship
model RolePermission {
  /// Role ID
  roleId       String
  /// Permission ID
  permissionId String
  /// Date and time when the permission was granted
  grantedAt    DateTime @default(now())

  /// Relations
  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permission")
}

/// Junction table for Person-Role many-to-many relationship
model PersonRole {
  /// Person ID
  personId  String
  /// Role ID
  roleId    String
  /// Date and time when the role was assigned
  assignedAt DateTime @default(now())

  /// Relations
  person    Person    @relation(fields: [personId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])

  @@id([personId, roleId])
  @@map("person_role")
}
